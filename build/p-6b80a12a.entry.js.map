{"version":3,"names":["geovClassDistriCss","chartColors","qrClassesCount","GeovClassDistri","constructor","hostRef","this","sparqlEndpoint","undefined","width","height","loading","componentDidLoad","isNode","Plotly","importPlotlyBasic","sparqlJson","then","res","_a","response","results","bindings","labels","map","elt","classnames","value","values","parseInt","classcounts","colors","i","length","push","plotlyData","type","textinfo","textposition","marker","classNb","entNb_x1000","Math","round","reduce","a","b","layout","title","showlegend","newPlot","el","render","h","Host","style","class","name"],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-class-distri/geov-class-distri.css?tag=geov-class-distri","node_modules/@geovistory/design-system-web/dist/collection/components/geov-class-distri/geov-class-distri.js"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n}\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--ion-color-light-tint, #fafafa);\n}\n","import { h, Host } from \"@stencil/core\";\nimport { isNode } from \"../../lib/isNode\";\nimport { importPlotlyBasic } from \"../../lib/importPlotlyBasic\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\nconst chartColors = [\n  '#322659',\n  '#44337A',\n  '#553C9A',\n  '#6B46C1',\n  '#805AD5',\n  '#9F7AEA',\n  '#B794F4',\n  '#D6BCFA',\n  '#E9D8FD',\n  '#FAF5FF',\n  '#E9D8FD',\n  '#D6BCFA',\n  '#B794F4',\n  '#9F7AEA',\n  '#805AD5',\n  '#6B46C1',\n  '#553C9A',\n  '#44337A',\n];\nconst qrClassesCount = () => `\n  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n  SELECT (group_concat(?class;separator=\", \") as ?classnames) (Max(?classcount) as ?classcounts)\n  WHERE {\n      {\n          SELECT ?classuri (count(?entity) as ?classcount)\n          WHERE {\n              ?entity a ?classuri .\n          }\n          GROUP BY ?classuri\n      }\n      ?classuri rdfs:label ?class\n  }\n  GROUP BY ?classuri\n  ORDER by DESC(?classcounts)\n`;\n/**\n * This component fetches the frequency of each class (object of `rdfs:type` or `a`)\n * exsisting on the given sparql endpoint.\n *\n * The result is displayed as a pie-chart.\n */\nexport class GeovClassDistri {\n  constructor() {\n    this.sparqlEndpoint = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.loading = undefined;\n  }\n  async componentDidLoad() {\n    // If we are in a browser\n    if (!isNode()) {\n      this.loading = true;\n      // Load plotly script\n      const Plotly = await importPlotlyBasic();\n      // Send the request to the provided sparql endpoint\n      sparqlJson(this.sparqlEndpoint, qrClassesCount()).then(res => {\n        var _a;\n        // Parse the response\n        const response = (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings;\n        const labels = response.map(elt => elt.classnames.value);\n        const values = response.map(elt => parseInt(elt.classcounts.value));\n        // Prepare colors\n        const colors = [];\n        for (let i = 0; i < values.length; i++) {\n          colors.push(chartColors[i % chartColors.length]);\n        }\n        // Chart data, shape, and parameters\n        const plotlyData = [\n          {\n            labels: labels,\n            values: values,\n            type: 'pie',\n            textinfo: 'label+percent',\n            textposition: 'inside',\n            marker: { colors: colors },\n          },\n        ];\n        // Chart Layout - Prepare\n        const classNb = values.length;\n        const entNb_x1000 = Math.round(values.reduce((a, b) => a + b, 0) / 1000);\n        // Chart Layout - Set\n        const layout = {\n          width: this.width,\n          height: this.height,\n          title: `Distribution of ${classNb} classes (${entNb_x1000}k entities)`,\n          showlegend: false,\n        };\n        // Draw the chart\n        if (Plotly)\n          Plotly.newPlot(this.el, plotlyData, layout);\n        this.loading = false;\n      });\n    }\n  }\n  render() {\n    return (h(Host, null, this.loading && (h(\"div\", { style: { width: this.width + 'px', height: this.height + 'px' }, class: \"loading\" }, h(\"ion-spinner\", { name: \"dots\" })))));\n  }\n  static get is() { return \"geov-class-distri\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-class-distri.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-class-distri.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"width\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Size in pixel\\nof the final chart\"\n        },\n        \"attribute\": \"width\",\n        \"reflect\": false\n      },\n      \"height\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Size in pixel\\nof the final chart\"\n        },\n        \"attribute\": \"height\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"loading\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n//# sourceMappingURL=geov-class-distri.js.map\n"],"mappings":"qKAAA,MAAMA,EAAqB,+JCI3B,MAAMC,EAAc,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEF,MAAMC,EAAiB,IAAM,0b,MAuBhBC,EAAe,MAC1B,WAAAC,CAAAC,G,UACEC,KAAKC,eAAiBC,UACtBF,KAAKG,MAAQD,UACbF,KAAKI,OAASF,UACdF,KAAKK,QAAUH,S,CAEjB,sBAAMI,GAEJ,IAAKC,IAAU,CACbP,KAAKK,QAAU,KAEf,MAAMG,QAAeC,IAErBC,EAAWV,KAAKC,eAAgBL,KAAkBe,MAAKC,IACrD,IAAIC,EAEJ,MAAMC,GAAYD,EAAKD,IAAQ,MAAQA,SAAa,OAAS,EAAIA,EAAIG,WAAa,MAAQF,SAAY,OAAS,EAAIA,EAAGG,SACtH,MAAMC,EAASH,EAASI,KAAIC,GAAOA,EAAIC,WAAWC,QAClD,MAAMC,EAASR,EAASI,KAAIC,GAAOI,SAASJ,EAAIK,YAAYH,SAE5D,MAAMI,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IAAK,CACtCD,EAAOG,KAAKjC,EAAY+B,EAAI/B,EAAYgC,Q,CAG1C,MAAME,EAAa,CACjB,CACEZ,OAAQA,EACRK,OAAQA,EACRQ,KAAM,MACNC,SAAU,gBACVC,aAAc,SACdC,OAAQ,CAAER,OAAQA,KAItB,MAAMS,EAAUZ,EAAOK,OACvB,MAAMQ,EAAcC,KAAKC,MAAMf,EAAOgB,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAAK,KAEnE,MAAMC,EAAS,CACbtC,MAAOH,KAAKG,MACZC,OAAQJ,KAAKI,OACbsC,MAAO,mBAAmBR,cAAoBC,eAC9CQ,WAAY,OAGd,GAAInC,EACFA,EAAOoC,QAAQ5C,KAAK6C,GAAIhB,EAAYY,GACtCzC,KAAKK,QAAU,KAAK,G,EAI1B,MAAAyC,GACE,OAAQC,EAAEC,EAAM,KAAMhD,KAAKK,SAAY0C,EAAE,MAAO,CAAEE,MAAO,CAAE9C,MAAOH,KAAKG,MAAQ,KAAMC,OAAQJ,KAAKI,OAAS,MAAQ8C,MAAO,WAAaH,EAAE,cAAe,CAAEI,KAAM,U"}