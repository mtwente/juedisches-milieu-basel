{"version":3,"names":["getSSRData","key","_a","_b","_c","_d","window","__NEXT_DATA__","props","pageProps","_ssrData","setSSRData","val","document","__STENCIL_DATA__","setSSRId","component","_ssrId","generateUID","firstPart","Math","random","secondPart","f","toString","slice","s"],"sources":["node_modules/@geovistory/design-system-web/dist/collection/lib/ssr/getSSRData.js","node_modules/@geovistory/design-system-web/dist/collection/lib/ssr/setSSRData.js","node_modules/@geovistory/design-system-web/dist/collection/lib/ssr/setSSRId.js"],"sourcesContent":["/**\n * Get data from `window?.__NEXT_DATA__?.props?.pageProps?._ssrData?.[key]`\n *\n * If nothing found, returns undefined.\n *\n * This is for using this component in combination with server side rendering of next.js.\n *\n * It is up to the server code to put the correct data at the given path:\n * `window?.__NEXT_DATA__?.props?.pageProps?._ssrData.[key]`\n *\n * @param key the key in `window?.__NEXT_DATA__?.props?.pageProps?._ssrData?.[key]` to get data from\n * @returns any\n */\nexport function getSSRData(key) {\n  var _a, _b, _c, _d;\n  if (key) {\n    // @ts-ignore\n    return (_d = (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.__NEXT_DATA__) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.pageProps) === null || _c === void 0 ? void 0 : _c._ssrData) === null || _d === void 0 ? void 0 : _d[key];\n  }\n}\n//# sourceMappingURL=getSSRData.js.map\n","/**\n * Set a key-value pair in `document.__STENCIL_DATA__`\n *\n * To make it work, ensure that `document.__STENCIL_DATA__` is an object,\n * e.g. by initializing the variable like this:\n * ```ts\n * document.__STENCIL_DATA__ = {}\n * ```\n *\n * When `document.__STENCIL_DATA__` is undefined or no object, the function\n * does nothing.\n *\n * @param key the key to set the data\n * @param val the value (data) to set\n */\nexport function setSSRData(key, val) {\n  // @ts-ignore\n  if (typeof (document === null || document === void 0 ? void 0 : document.__STENCIL_DATA__) === 'object')\n    document.__STENCIL_DATA__[key] = val;\n}\n//# sourceMappingURL=setSSRData.js.map\n","/**\n * Sets the _ssrId of the given component.\n *\n * The generated _ssrId can be used in combination with the functions\n * `setSSRData()` and `getSSRData()`.\n *\n * To make it work, ensure that `document.__STENCIL_DATA__` is an object,\n * e.g. by initializing the variable like this:\n * ```ts\n * document.__STENCIL_DATA__ = {}\n * ```\n *\n * If the _ssrId is already set, it will not be overridden. This allows\n * you to have a predictable key to retrieve the fetched data with.\n *\n * Example:\n * ```ts\n * export class MyComponent {\n *   // reflect _ssrID on html attribute of component element\n *   @Prop({ reflect: true }) _ssrId?: string;\n *\n *   constructor() {\n *     setSSRId(this); // <- pass in the component\n *   }\n * }\n * ```\n *\n *\n * @param component the component instance\n */\nexport const setSSRId = (component) => {\n  // @ts-ignore\n  if ((document === null || document === void 0 ? void 0 : document.__STENCIL_DATA__) && !component._ssrId) {\n    component._ssrId = generateUID();\n  }\n};\nfunction generateUID() {\n  // I generate the UID from two parts here\n  // to ensure the random number provide enough bits.\n  const firstPart = (Math.random() * 46656) | 0;\n  const secondPart = (Math.random() * 46656) | 0;\n  const f = ('000' + firstPart.toString(36)).slice(-3);\n  const s = ('000' + secondPart.toString(36)).slice(-3);\n  return f + s;\n}\n//# sourceMappingURL=setSSRId.js.map\n"],"mappings":"AAaO,SAASA,EAAWC,GACzB,IAAIC,EAAIC,EAAIC,EAAIC,EAChB,GAAIJ,EAAK,CAEP,OAAQI,GAAMD,GAAMD,GAAMD,EAAKI,SAAW,MAAQA,cAAgB,OAAS,EAAIA,OAAOC,iBAAmB,MAAQL,SAAY,OAAS,EAAIA,EAAGM,SAAW,MAAQL,SAAY,OAAS,EAAIA,EAAGM,aAAe,MAAQL,SAAY,OAAS,EAAIA,EAAGM,YAAc,MAAQL,SAAY,OAAS,EAAIA,EAAGJ,EACrS,CACA,CCJO,SAASU,EAAWV,EAAKW,GAE9B,UAAYC,WAAa,MAAQA,gBAAkB,OAAS,EAAIA,SAASC,oBAAsB,SAC7FD,SAASC,iBAAiBb,GAAOW,CACrC,CCWY,MAACG,EAAYC,IAEvB,IAAKH,WAAa,MAAQA,gBAAkB,OAAS,EAAIA,SAASC,oBAAsBE,EAAUC,OAAQ,CACxGD,EAAUC,OAASC,GACvB,GAEA,SAASA,IAGP,MAAMC,EAAaC,KAAKC,SAAW,MAAS,EAC5C,MAAMC,EAAcF,KAAKC,SAAW,MAAS,EAC7C,MAAME,GAAK,MAAQJ,EAAUK,SAAS,KAAKC,OAAO,GAClD,MAAMC,GAAK,MAAQJ,EAAWE,SAAS,KAAKC,OAAO,GACnD,OAAOF,EAAIG,CACb,Q"}