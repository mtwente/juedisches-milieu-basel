{"version":3,"names":["sparqlJson","url","query","params","URLSearchParams","controller","AbortController","signal","promise","Promise","async","resolve","res","fetch","method","headers","Accept","redirect","data","json","ex","isAbortError","console","log","message","cancel","abort","error","name"],"sources":["node_modules/@geovistory/design-system-web/dist/collection/lib/sparqlJson.js"],"sourcesContent":["export function sparqlJson(url, query) {\n  const params = new URLSearchParams({ query: query });\n  const controller = new AbortController();\n  const signal = controller.signal;\n  const promise = new Promise(async (resolve) => {\n    try {\n      const res = await fetch(`${url}?${params}`, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/sparql-results+json',\n        },\n        redirect: 'follow',\n        signal,\n      });\n      const data = await res.json();\n      resolve(data);\n    }\n    catch (ex) {\n      if (isAbortError(ex)) {\n        console.log(ex.message);\n      }\n      else {\n        console.log(ex);\n      }\n    }\n  });\n  promise.cancel = () => controller.abort();\n  return promise;\n}\nfunction isAbortError(error) {\n  if (error && error.name === 'AbortError') {\n    return true;\n  }\n  return false;\n}\n//# sourceMappingURL=sparqlJson.js.map\n"],"mappings":"AAAO,SAASA,EAAWC,EAAKC,GAC9B,MAAMC,EAAS,IAAIC,gBAAgB,CAAEF,MAAOA,IAC5C,MAAMG,EAAa,IAAIC,gBACvB,MAAMC,EAASF,EAAWE,OAC1B,MAAMC,EAAU,IAAIC,SAAQC,MAAOC,IACjC,IACE,MAAMC,QAAYC,MAAM,GAAGZ,KAAOE,IAAU,CAC1CW,OAAQ,MACRC,QAAS,CACPC,OAAQ,mCAEVC,SAAU,SACVV,WAEF,MAAMW,QAAaN,EAAIO,OACvBR,EAAQO,EACd,CACI,MAAOE,GACL,GAAIC,EAAaD,GAAK,CACpBE,QAAQC,IAAIH,EAAGI,QACvB,KACW,CACHF,QAAQC,IAAIH,EACpB,CACA,KAEEZ,EAAQiB,OAAS,IAAMpB,EAAWqB,QAClC,OAAOlB,CACT,CACA,SAASa,EAAaM,GACpB,GAAIA,GAASA,EAAMC,OAAS,aAAc,CACxC,OAAO,IACX,CACE,OAAO,KACT,Q"}