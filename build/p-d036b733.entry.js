import{r as t,e as i,h as n,H as s}from"./p-1bafedb0.js";import{s as e}from"./p-855a8bbd.js";const o="German authority file (GND)";const l="https://lobid.org/gnd/search?q=";const a="&size=";const h="&format=json:preferredName";const r="&filter=type:Person";const c="&filter=type:PlaceOrGeographicName";const d="&filter=type:CorporateBody";const u="Wikidata";const p="https://query.wikidata.org/sparql";const f=(t,i,n)=>`SELECT DISTINCT * WHERE {\n  SERVICE wikibase:mwapi {\n      bd:serviceParam wikibase:endpoint "www.wikidata.org";\n                      wikibase:api "EntitySearch";\n                      mwapi:search "${t}";\n                      mwapi:language "en".\n      ?item wikibase:apiOutputItem mwapi:item.\n      ?num wikibase:apiOrdinal true.\n  }\n  ?item rdfs:label ?name filter (lang(?name) = "en").\n  ${i}\n} ORDER BY ASC(?num) LIMIT ${n}`;const w="?item wdt:P31 wd:Q5.";const m="?item wdt:P31/wdt:P279* wd:Q82794.";const y="?item wdt:P31/wdt:P279* wd:Q43229.";const b="IdRef";const g="https://www.idref.fr/Sru/Solr?q=";const v="https://www.idref.fr/";const k="&start=0&rows=";const C="&indent=on&sort=score%20desc&fl=id,ppn_z,affcourt_z&version=2.2&wt=json";const P="all:";const I="persname_t:";const E="geogname_t:";const x="corpname_t:";const D="Geovistory";const R="https://sparql.geovistory.org/api_v1_community_data";const S=(t,i,n)=>`\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX text: <http://jena.apache.org/text#>\nPREFIX ontome: <https://ontome.net/ontology/>\n\nSELECT DISTINCT ?item ?name ?classUri\nWHERE\n{\n  \t(?item) text:query ('${t}') .\n  \t?item rdfs:label ?name .\n  \t?item a ?classUri${i} .\n}\nLIMIT ${n}\nOFFSET 0`;const _=", ontome:c21";const G=", ontome:c363";const N=", ontome:c68";const T=":host {\n  display: block;\n}\n\n.colContent {\n  overflow: hidden; /* Hide overflow */\n  text-overflow: ellipsis; /*Add suspension points (...) to indicate cut content */\n  white-space: nowrap; /* Prevents content from going to line */\n}\n\n.containerResponsive {\n  container-type: inline-size;\n}\n\n.colButtons {\n  display: none;\n  text-align: right;\n  white-space: nowrap;\n}\n.colMenu {\n  text-align: right;\n}\n\n@container (width >= 320px) {\n  .colButtons {\n    display: block;\n  }\n\n  .colMenu {\n    display: none;\n  }\n}\n";const H=class{constructor(n){t(this,n);this.selected=i(this,"selected",3);this.apiAllowedValues=["gnd","wikidata","idref","geovistory"];this.api=undefined;this.keywords=undefined;this.type=undefined;this.nbOccurencesMax=5;this.displaySelectBtn=true;this.displayOpenBtn=true;this.displayCopyBtn=false;this.uriData=undefined;this.title=undefined;this.popoverElement=undefined;this.isPopoverOpen=false;this.popoverItem=undefined;this.isLoadingData=false}validateApiValue(t,i){if(!this.apiAllowedValues.includes(t)){console.error('Invalid value for prop "api". It must be one of the allowed values.');this.api=i}}keywordsHandler(t){this.keywords=t;this.executeAllQueries()}typeHandler(t){this.type=t;this.executeAllQueries()}async getDataGND(){this.title=o;this.uriData=[];if(this.keywords.trim()!=""){let t=l+this.keywords+a+this.nbOccurencesMax+h;if(this.type!==null&&this.type==="Person"){t=t+r}if(this.type!==null&&this.type==="Place"){t=t+c}if(this.type!==null&&this.type==="Group"){t=t+d}const i=await fetch(t);const n=await i.json();this.uriData=n.map((t=>({uri:t.id,label:t.label})))}}async getDataWikiData(){var t;this.title=u;this.uriData=[];if(this.keywords.trim()!=""){let i=f(this.keywords,"",this.nbOccurencesMax);if(this.type!==null&&this.type==="Person"){i=f(this.keywords,w,this.nbOccurencesMax)}if(this.type!==null&&this.type==="Place"){i=f(this.keywords,m,this.nbOccurencesMax)}if(this.type!==null&&this.type==="Group"){i=f(this.keywords,y,this.nbOccurencesMax)}const n=await e(p,i);this.uriData=(t=n===null||n===void 0?void 0:n.results)===null||t===void 0?void 0:t.bindings.map((t=>({uri:t.item.value,label:t.name.value})))}}async getDataIdRef(){var t;this.title=b;this.uriData=[];if(this.keywords.trim()!=""){const i=this.keywords.trim().split(" ").join(" AND ");let n=g+P+"("+i+")"+k+this.nbOccurencesMax+C;if(this.type!==null&&this.type==="Person"){n=g+I+"("+i+")"+k+this.nbOccurencesMax+C}if(this.type!==null&&this.type==="Place"){n=g+E+"("+i+")"+k+this.nbOccurencesMax+C}if(this.type!==null&&this.type==="Group"){n=g+x+"("+i+")"+k+this.nbOccurencesMax+C}const s=await fetch(n);const e=await s.json();this.uriData=(t=e.response.docs)===null||t===void 0?void 0:t.map((t=>({uri:v+t.ppn_z,label:t.affcourt_z})))}}async getGeovistoryData(){var t;this.title=D;this.uriData=[];const i=this.keywords.trim().split(" ").map((t=>`*${t}*`)).join(" AND ");if(i.trim()!=""){let n=S(i,"",this.nbOccurencesMax);if(this.type!==null&&this.type==="Person"){n=S(i,_,this.nbOccurencesMax)}if(this.type!==null&&this.type==="Place"){n=S(i,G,this.nbOccurencesMax)}if(this.type!==null&&this.type==="Group"){n=S(i,N,this.nbOccurencesMax)}const s=await e(R,n);this.uriData=(t=s.results)===null||t===void 0?void 0:t.bindings.map((t=>({uri:t.item.value,label:t.name.value})))}}async executeAllQueries(){this.isLoadingData=true;if(this.api=="gnd"){await this.getDataGND()}if(this.api=="wikidata"){await this.getDataWikiData()}if(this.api=="idref"){await this.getDataIdRef()}if(this.api=="geovistory"){await this.getGeovistoryData()}this.isLoadingData=false}handleClick(t){this.isPopoverOpen=true;this.popoverItem=t}handleDismiss(){this.isPopoverOpen=false}handleSelected(t){this.selected.emit({uri:t.uri})}handleCopy(t){navigator.clipboard.writeText(t.uri)}async componentDidLoad(){await this.executeAllQueries()}componentDidRender(){if(this.isPopoverOpen){this.popoverElement.present();this.popoverElement.onDidDismiss().then((()=>{this.isPopoverOpen=false}))}}render(){return n(s,null,this.isPopoverOpen&&n("ion-popover",{ref:t=>this.popoverElement=t},this.displaySelectBtn&&n("ion-button",{expand:"block",onClick:()=>this.handleSelected(this.popoverItem)},"Select"),this.displayOpenBtn&&n("ion-button",{expand:"block",href:this.popoverItem.uri,fill:"outline",target:"_blank"},"Open",n("ion-icon",{name:"open-outline",slot:"end"})),this.displayCopyBtn&&n("ion-button",{expand:"block",fill:"clear",onClick:()=>this.handleCopy(this.popoverItem)},"Copy",n("ion-icon",{name:"copy-outline",slot:"end"})),n("ion-button",{expand:"block",fill:"clear",onClick:()=>this.handleDismiss()},n("ion-icon",{name:"close-circle-outline"}))),n("ion-card",null,n("ion-card-header",null,n("ion-card-subtitle",null,this.title)),n("ion-card-content",null,this.isLoadingData&&n("div",{style:{display:"flex",justifyContent:"center"}},n("ion-spinner",null)),!this.isLoadingData&&n("ion-list",{lines:"full"},this.uriData&&this.uriData.length===0&&n("ion-item",{lines:"none"},"Nothing found"),this.uriData&&this.uriData.map(((t,i)=>n("ion-item",{lines:i===this.uriData.length-1?"none":"full"},n("ion-grid",{class:"containerResponsive"},n("ion-row",null,n("ion-col",{class:"colContent"},n("ion-label",null,n("h2",null,t.label),n("p",null,t.uri))),n("ion-col",{class:"colButtons"},this.displayCopyBtn&&n("ion-button",{fill:"clear",onClick:()=>this.handleCopy(t)},"Copy",n("ion-icon",{name:"copy-outline",slot:"end"})),this.displayOpenBtn&&n("ion-button",{fill:"clear",href:t.uri,target:"_blank"},"Open",n("ion-icon",{name:"open-outline",slot:"end"})),this.displaySelectBtn&&n("ion-button",{onClick:()=>this.handleSelected(t)},"Select")),n("ion-col",{class:"colMenu"},n("ion-button",{onClick:()=>this.handleClick(t)},n("ion-icon",{name:"menu-outline"}))))))))))),n("slot",null))}static get watchers(){return{api:["validateApiValue"],keywords:["keywordsHandler"],type:["typeHandler"]}}};H.style=T;export{H as geov_authority_lookup_explorer};
//# sourceMappingURL=p-d036b733.entry.js.map