{"version":3,"names":["geovMapPlacesCss","GeovMapPlaces","constructor","hostRef","this","parseResponse","res","mapObject","_a","response","results","bindings","length","limit","card","el","querySelector","style","setProperty","innerHTML","forEach","ele","featureId","value","locName","markers","ids","has","features","push","type","geometry","coordinates","parseFloat","properties","name","link","add","getSource","setData","sparqlEndpoint","undefined","center","zoom","queryBoundingBox","projectID","loading","Set","componentDidLoad","isNode","MapLibre","importMapLibre","map","Map","container","version","sources","osm","tiles","tileSize","attribution","maxzoom","layers","id","source","glyphs","qrPlaces","bounds","_sw","lat","toFixed","_ne","lng","on","addSource","data","cluster","clusterMaxZoom","clusterRadius","computedStyle","getComputedStyle","customColors","getPropertyValue","addLayer","filter","paint","layout","handleMarkerClick","e","feature","description","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","sparqlJson","getBounds","then","querySelectorAll","render","h","Host","width","height","class","display","zIndex"],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-map-places/geov-map-places.css?tag=geov-map-places","node_modules/@geovistory/design-system-web/dist/collection/components/geov-map-places/geov-map-places.js"],"sourcesContent":["geov-map-places {\n  display: block;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  --point-color: var(--ion-color-primary, #3880ff);\n  --circle-color-small: #fc8d59;\n  --circle-color-medium: #ffffbf;\n  --circle-color-large: #91bfdb;\n}\n\ngeov-map-places ion-toast {\n  --background: var(--ion-color-danger, red);\n}\n\n.loading {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--ion-color-light-tint, #fafafa);\n}\n","import { h, Host } from \"@stencil/core\";\nimport { isNode } from \"../../lib/isNode\";\nimport { importMapLibre } from \"../../lib/importMapLibre\";\nimport { sparqlJson } from \"../../lib/sparqlJson\";\n/**\n * This component fetches <a href=\"https://ontome.net/ontology/c363\">geographical places</a> from a project's SPARQL endpoint and their\n * <a href=\"https://ontome.net/ontology/c51\">coordinates</a> using <a href=\"https://ontome.net/ontology/p147\">had presence</a>\n * and <a href=\"https://ontome.net/ontology/p148\">was at</a>) properties, then displays them on a map. The map shows\n * linked markers that guide users to the respective locations within the project. The map is built using on MapLibre.\n */\nexport class GeovMapPlaces {\n  constructor() {\n    this.parseResponse = (res, mapObject) => {\n      var _a;\n      // Parse the response and update the markers on the map\n      const response = (_a = res === null || res === void 0 ? void 0 : res.results) === null || _a === void 0 ? void 0 : _a.bindings;\n      // If there are too many results, show a card\n      if (response.length >= this.limit) {\n        const card = this.el.querySelector('ion-card');\n        card.style.setProperty('display', 'block');\n        card.querySelector('ion-card-title').innerHTML = `Too many results (${response.length})`;\n      }\n      response.forEach(ele => {\n        const featureId = ele['subject'].value;\n        const locName = ele['geoPlaceLabel'].value;\n        if (!this.markers.ids.has(featureId)) {\n          this.markers.features.push({\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [parseFloat(ele['long'].value), parseFloat(ele['lat'].value)],\n            },\n            properties: {\n              name: locName,\n              link: featureId,\n            },\n          });\n          this.markers.ids.add(featureId);\n        }\n      });\n      mapObject.getSource('places').setData(this.markers);\n    };\n    this.sparqlEndpoint = undefined;\n    this.limit = 10000;\n    this.center = [8.2318, 46.7985];\n    this.zoom = 6;\n    this.queryBoundingBox = true;\n    this.projectID = undefined;\n    this.loading = undefined;\n    this.markers = {\n      type: 'FeatureCollection',\n      features: [],\n      ids: new Set(),\n    };\n  }\n  async componentDidLoad() {\n    // If we are in a browser\n    if (!isNode()) {\n      this.loading = true;\n      // Load MapLibre script\n      const MapLibre = await importMapLibre();\n      const map = new MapLibre.Map({\n        container: this.el,\n        style: {\n          version: 8,\n          sources: {\n            osm: {\n              type: 'raster',\n              tiles: [\n                'https://a.basemaps.cartocdn.com/rastertiles/light_nolabels/{z}/{x}/{y}{ratio}.png',\n                'https://b.basemaps.cartocdn.com/rastertiles/light_nolabels/{z}/{x}/{y}{ratio}.png',\n                'https://c.basemaps.cartocdn.com/rastertiles/light_nolabels/{z}/{x}/{y}{ratio}.png',\n              ],\n              tileSize: 256,\n              attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n              maxzoom: 19,\n            },\n          },\n          layers: [\n            {\n              id: 'osm',\n              type: 'raster',\n              source: 'osm', // This must match the source key above\n            },\n          ],\n          glyphs: 'https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf',\n        },\n        center: this.center,\n        zoom: this.zoom,\n      });\n      // request to the provided sparql endpoint\n      const qrPlaces = (bounds) => `\n      PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n      PREFIX ontome: <https://ontome.net/ontology/>\n      PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n      SELECT ?subject ?geoPlaceLabel ?long ?lat\n          WHERE {?subject ^ontome:p147 ?presence.\n          ?subject rdfs:label    ?geoPlaceLabel.\n          ?presence ontome:p148 ?place.\n          bind(replace(str(?place), '<http://www.opengis.net/def/crs/EPSG/0/4326>', \"\", \"i\") as ?rep)\n          bind( replace( str(?rep), \"^[^0-9\\.-]*([-]?[0-9\\.]+) .*$\", \"$1\" ) as ?long )\n          bind( replace( str(?rep), \"^.* ([-]?[0-9\\.]+)[^0-9\\.]*$\", \"$1\" ) as ?lat )\n          ${this.queryBoundingBox\n        ? `\n          FILTER (\n            xsd:double(?lat) >= ${bounds._sw.lat.toFixed(3)} &&\n            xsd:double(?lat) <= ${bounds._ne.lat.toFixed(3)} &&\n            xsd:double(?long) >= ${bounds._sw.lng.toFixed(3)} &&\n            xsd:double(?long) <= ${bounds._ne.lng.toFixed(3)}\n        )`\n        : ''}\n        }\n        LIMIT ${this.limit}\n          `;\n      map.on('load', () => {\n        map.addSource('places', {\n          type: 'geojson',\n          data: this.markers,\n          cluster: true,\n          clusterMaxZoom: 12,\n          clusterRadius: 40, // Radius of each cluster when clustering points (defaults to 50)\n        });\n        const computedStyle = getComputedStyle(this.el);\n        const customColors = [\n          computedStyle.getPropertyValue('--point-color') || 'red',\n          computedStyle.getPropertyValue('--circle-color-small') || 'red',\n          computedStyle.getPropertyValue('--circle-color-medium') || 'green',\n          computedStyle.getPropertyValue('--circle-color-large') || 'grey',\n        ];\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'places',\n          filter: ['has', 'point_count'],\n          paint: {\n            // Use step expressions (https://maplibre.org/maplibre-style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * --circle-color-small, 20px circles when point count is less than 100\n            //   * --circle-color-medium, 30px circles when point count is between 100 and 750\n            //   * --circle-color-large, 40px circles when point count is greater than or equal to 750\n            'circle-color': ['step', ['get', 'point_count'], customColors[1], 100, customColors[2], 750, customColors[3]],\n            'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40],\n          },\n        });\n        map.addLayer({\n          id: 'cluster-count',\n          type: 'symbol',\n          source: 'places',\n          filter: ['has', 'point_count'],\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-size': 12,\n          },\n        });\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'places',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            // --point-color\n            'circle-color': customColors[0],\n            'circle-radius': 10,\n          },\n        });\n        //   Add popups to the markers\n        const handleMarkerClick = e => {\n          const feature = e.features[0];\n          const coordinates = feature.geometry.coordinates;\n          const description = feature.properties.name;\n          const link = this.projectID ? `${feature.properties.link}?p=${this.projectID}` : feature.properties.link;\n          new MapLibre.Popup().setLngLat(coordinates).setHTML(`<div><a href = \"${link}\" target=\"_blank\">${description}</a></div>`).addTo(map);\n        };\n        // An on click event listener for the \"unclustered-point\" layer\n        map.on('click', 'unclustered-point', handleMarkerClick);\n        map.on('mouseenter', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = 'pointer';\n        });\n        map.on('mouseleave', 'unclustered-point', () => {\n          map.getCanvas().style.cursor = '';\n        });\n        // Fetch data from the SPARQL endpoint\n        sparqlJson(this.sparqlEndpoint, qrPlaces(map.getBounds())).then(res => this.parseResponse(res, map));\n      });\n      if (this.queryBoundingBox) {\n        // Limit the query whenever vie is moved/zoomed\n        map.on('moveend', () => {\n          var _a;\n          // Remove the card\n          (_a = this.el.querySelectorAll('ion-card')) === null || _a === void 0 ? void 0 : _a.forEach(ele => ele.style.setProperty('display', 'none'));\n          // Fetch data from the SPARQL endpoint\n          sparqlJson(this.sparqlEndpoint, qrPlaces(map.getBounds())).then(res => this.parseResponse(res, map));\n        });\n      }\n      this.loading = false;\n    }\n  }\n  render() {\n    return (h(Host, null, this.loading && (h(\"div\", { style: { width: 100 + '%', height: 100 + '%' }, class: \"loading\" }, h(\"ion-spinner\", { name: \"dots\" }))), h(\"ion-card\", { style: { display: 'none', zIndex: '1000' } }, h(\"ion-card-header\", null, h(\"ion-card-title\", null, \"Too many results\")), h(\"ion-card-content\", null, \"please zoom in to see all available datapoints in a given location\"))));\n  }\n  static get is() { return \"geov-map-places\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-map-places.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-map-places.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"sparqlEndpoint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"sparqlEndpoint\\nURL of the sparql endpoint\"\n        },\n        \"attribute\": \"sparql-endpoint\",\n        \"reflect\": false\n      },\n      \"limit\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Maximum of Objects fetched (LIMIT)\"\n        },\n        \"attribute\": \"limit\",\n        \"reflect\": false,\n        \"defaultValue\": \"10000\"\n      },\n      \"center\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"[number, number]\",\n          \"resolved\": \"[number, number]\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The center of the map\"\n        },\n        \"defaultValue\": \"[8.2318, 46.7985]\"\n      },\n      \"zoom\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The initial zoomlevel of the map\"\n        },\n        \"attribute\": \"zoom\",\n        \"reflect\": false,\n        \"defaultValue\": \"6\"\n      },\n      \"queryBoundingBox\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The results are restricted to the visible part of the map\"\n        },\n        \"attribute\": \"query-bounding-box\",\n        \"reflect\": false,\n        \"defaultValue\": \"true\"\n      },\n      \"projectID\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The ID of the project to be redirected to\"\n        },\n        \"attribute\": \"project-i-d\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"loading\": {},\n      \"markers\": {}\n    };\n  }\n  static get elementRef() { return \"el\"; }\n}\n//# sourceMappingURL=geov-map-places.js.map\n"],"mappings":"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"}