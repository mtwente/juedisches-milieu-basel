{"version":3,"names":["textareaIosCss","textareaMdCss","Textarea","constructor","hostRef","this","inputId","textareaIds","didTextareaClearOnEdit","inheritedAttributes","hasLoggedDeprecationWarning","onInput","ev","input","target","value","emitInputChange","onChange","emitValueChange","onFocus","hasFocus","focusedValue","focusChange","ionFocus","emit","onBlur","ionBlur","onKeyDown","checkClearOnEdit","color","undefined","autocapitalize","autofocus","clearOnEdit","debounce","disabled","fill","inputmode","enterkeyhint","maxlength","minlength","name","placeholder","readonly","required","spellcheck","cols","rows","wrap","autoGrow","counter","counterFormatter","errorText","helperText","label","labelPlacement","legacy","shape","debounceChanged","ionInput","originalIonInput","debounceEvent","disabledChanged","emitStyle","valueChanged","nativeInput","getValue","runAutoGrow","connectedCallback","el","legacyFormController","createLegacyFormController","slotMutationController","createSlotMutationController","forceUpdate","notchController","createNotchController","notchSpacerEl","labelSlot","document","dispatchEvent","CustomEvent","detail","disconnectedCallback","destroy","componentWillLoad","Object","assign","inheritAriaAttributes","inheritAttributes","componentDidLoad","componentDidRender","_a","calculateNotchWidth","setFocus","focus","getInputElement","Promise","resolve","hasLegacyControl","ionStyle","interactive","textarea","hasValue","event","newValue","toString","ionChange","writeTask","textareaWrapper","dataset","replicatedValue","renderLegacyTextarea","printIonWarning","mode","getIonMode","labelId","findItemLabel","id","h","Host","class","createColorClasses","ref","autoCapitalize","autoFocus","enterKeyHint","inputMode","maxLength","minLength","readOnly","renderLabel","hasLabel","querySelector","renderLabelContainer","hasOutlineFill","renderHintText","renderCounter","getCounterText","renderBottomContent","hasHintText","hasCounter","renderTextarea","inItem","hostContext","shouldRenderHighlight","render"],"sources":["node_modules/@ionic/core/dist/collection/components/textarea/textarea.ios.css?tag=ion-textarea&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/textarea/textarea.md.css?tag=ion-textarea&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/textarea/textarea.js"],"sourcesContent":[":host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the textarea border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused\n   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: 0.6;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --border-radius: 0;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #3880ff);\n  --highlight-color-valid: var(--ion-color-success, #2dd36f);\n  --highlight-color-invalid: var(--ion-color-danger, #eb445a);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n:host(.legacy-textarea) {\n  flex: 1;\n  background: var(--background);\n  white-space: pre-wrap;\n}\n\n:host(.legacy-textarea.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host(:not(.legacy-textarea)) {\n  --padding-bottom: 8px;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n  background: initial;\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item:not(.item-label)) {\n  --padding-start: 0;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n.native-textarea {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  white-space: pre-wrap;\n  /**\n   * This ensures the textarea\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the textarea.\n   */\n  z-index: 1;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n:host(.legacy-textarea) .native-textarea {\n  white-space: inherit;\n}\n\n:host(.legacy-textarea) .native-textarea,\n:host(.legacy-textarea) .textarea-legacy-wrapper::after {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n}\n\n.native-textarea {\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n:host(.legacy-textarea) .textarea-legacy-wrapper::after {\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  .cloned-input {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .cloned-input {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .cloned-input {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  [dir=rtl] .cloned-input {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    .cloned-input:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host(.legacy-textarea[auto-grow]) .cloned-input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host([auto-grow]) .cloned-input {\n  height: 100%;\n}\n\n:host([auto-grow]) .native-textarea {\n  overflow: hidden;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {\n  opacity: 0;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 1;\n}\n\n.textarea-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: flex-start;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.has-focus) textarea {\n  caret-color: var(--highlight-color);\n}\n\n.native-wrapper textarea {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n}\n\n.native-wrapper,\n.textarea-legacy-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  /**\n   * This avoids a WebKit bug where\n   * the height of the inner textarea\n   * is incorrect and flows outside the\n   * parent container: https://bugs.webkit.org/show_bug.cgi?id=256781\n   * TODO FW-4734\n   */\n  grid-auto-rows: 100%;\n}\n.native-wrapper::after,\n.textarea-legacy-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-wrapper::after {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  /**\n   * Note: Do not use @include text-inherit()\n   * as that sets white-space: inherit\n   * Instead, we use white-space: pre-wrap above.\n   */\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.textarea-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the textarea.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 12px;\n}\n\n/**\n * If the textarea has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the textarea. Otherwise the helper text should\n * be shown.\n */\n.textarea-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.textarea-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, #737373);\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .helper-text {\n  display: none;\n}\n\n.textarea-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, #737373);\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n.label-text-wrapper {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the textarea\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the textarea height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.textarea-outline-notch-hidden {\n  display: none;\n}\n\n.textarea-wrapper textarea {\n  /**\n   * When the floating label appears on top of the\n   * textarea, we need to fade the textarea out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL.\n */\n:host(.textarea-label-placement-start) .textarea-wrapper {\n  flex-direction: row;\n}\n\n:host(.textarea-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the textarea in LTR and\n * on the left in RTL.\n */\n:host(.textarea-label-placement-end) .textarea-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the textarea should be on the start\n * when the label sits at the end.\n */\n:host(.textarea-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.textarea-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.textarea-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the textarea and is scaled down.\n * Floating: Label sits over the textarea when the textarea has no\n * value and is blurred. Label sits above the textarea and is scaled\n * down when the textarea is focused or has a value.\n *\n */\n:host(.textarea-label-placement-stacked) .textarea-wrapper,\n:host(.textarea-label-placement-floating) .textarea-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-label-placement-stacked) .label-text-wrapper:dir(rtl), :host(.textarea-label-placement-floating) .label-text-wrapper:dir(rtl) {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the textarea does not\n * overlap the label.\n */\n:host(.textarea-label-placement-stacked) textarea,\n:host(.textarea-label-placement-floating) textarea,\n:host(.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 8px;\n  margin-bottom: 0px;\n}\n\n/**\n * This makes the label sit over the textarea\n * when the textarea is blurred and has no value.\n */\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The textarea should be hidden when the label\n * is on top of the textarea. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.textarea-label-placement-floating) textarea {\n  opacity: 0;\n}\n\n:host(.has-focus.textarea-label-placement-floating) textarea,\n:host(.has-value.textarea-label-placement-floating) textarea {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.has-focus.textarea-label-placement-floating) .label-text-wrapper,\n:host(.has-value.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host {\n  --border-width: 0.55px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, #c8c7cc)));\n  --padding-top: 10px;\n  --padding-end: 0px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n  font-size: inherit;\n}\n\n:host(.legacy-textarea) {\n  --padding-top: 10px;\n  --padding-end: 8px;\n  --padding-bottom: 10px;\n  --padding-start: 0;\n}\n\n:host-context(.item-label-stacked),\n:host-context(.item-label-floating) {\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n}\n\n:host(.legacy-textarea) .native-textarea[disabled],\n:host(.textarea-disabled) {\n  opacity: 0.3;\n}\n\n:host(:not(.legacy-textarea)) {\n  min-height: 44px;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the textarea text.\n * Also, floating and stacked labels should not\n * push the label down since it it\n * sits on top of the textarea.\n */\n:host(.textarea-label-placement-floating),\n:host(.textarea-label-placement-stacked) {\n  --padding-top: 0px;\n  min-height: 56px;\n}",":host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the textarea border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused\n   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: 0.6;\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 0;\n  --padding-start: 0;\n  --border-radius: 0;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #3880ff);\n  --highlight-color-valid: var(--ion-color-success, #2dd36f);\n  --highlight-color-invalid: var(--ion-color-danger, #eb445a);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n:host(.legacy-textarea) {\n  flex: 1;\n  background: var(--background);\n  white-space: pre-wrap;\n}\n\n:host(.legacy-textarea.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host(:not(.legacy-textarea)) {\n  --padding-bottom: 8px;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n  background: initial;\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item:not(.item-label)) {\n  --padding-start: 0;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n.native-textarea {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  white-space: pre-wrap;\n  /**\n   * This ensures the textarea\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the textarea.\n   */\n  z-index: 1;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n:host(.legacy-textarea) .native-textarea {\n  white-space: inherit;\n}\n\n:host(.legacy-textarea) .native-textarea,\n:host(.legacy-textarea) .textarea-legacy-wrapper::after {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n}\n\n.native-textarea {\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n:host(.legacy-textarea) .textarea-legacy-wrapper::after {\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n@supports (inset-inline-start: 0) {\n  .cloned-input {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .cloned-input {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .cloned-input {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  [dir=rtl] .cloned-input {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    .cloned-input:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host(.legacy-textarea[auto-grow]) .cloned-input {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host([auto-grow]) .cloned-input {\n  height: 100%;\n}\n\n:host([auto-grow]) .native-textarea {\n  overflow: hidden;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value)) {\n  opacity: 0;\n}\n\n:host-context(.item-label-floating.item-has-placeholder:not(.item-has-value).item-has-focus) {\n  transition: opacity 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  opacity: 1;\n}\n\n.textarea-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: flex-start;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.has-focus) textarea {\n  caret-color: var(--highlight-color);\n}\n\n.native-wrapper textarea {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n}\n\n.native-wrapper,\n.textarea-legacy-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  /**\n   * This avoids a WebKit bug where\n   * the height of the inner textarea\n   * is incorrect and flows outside the\n   * parent container: https://bugs.webkit.org/show_bug.cgi?id=256781\n   * TODO FW-4734\n   */\n  grid-auto-rows: 100%;\n}\n.native-wrapper::after,\n.textarea-legacy-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-wrapper::after {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  /**\n   * Note: Do not use @include text-inherit()\n   * as that sets white-space: inherit\n   * Instead, we use white-space: pre-wrap above.\n   */\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.textarea-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the textarea.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 12px;\n}\n\n/**\n * If the textarea has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the textarea. Otherwise the helper text should\n * be shown.\n */\n.textarea-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.textarea-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, #737373);\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .helper-text {\n  display: none;\n}\n\n.textarea-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, #737373);\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n.label-text-wrapper {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the textarea\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the textarea height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.textarea-outline-notch-hidden {\n  display: none;\n}\n\n.textarea-wrapper textarea {\n  /**\n   * When the floating label appears on top of the\n   * textarea, we need to fade the textarea out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL.\n */\n:host(.textarea-label-placement-start) .textarea-wrapper {\n  flex-direction: row;\n}\n\n:host(.textarea-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the textarea in LTR and\n * on the left in RTL.\n */\n:host(.textarea-label-placement-end) .textarea-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the textarea should be on the start\n * when the label sits at the end.\n */\n:host(.textarea-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.textarea-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.textarea-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the textarea and is scaled down.\n * Floating: Label sits over the textarea when the textarea has no\n * value and is blurred. Label sits above the textarea and is scaled\n * down when the textarea is focused or has a value.\n *\n */\n:host(.textarea-label-placement-stacked) .textarea-wrapper,\n:host(.textarea-label-placement-floating) .textarea-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-label-placement-stacked) .label-text-wrapper:dir(rtl), :host(.textarea-label-placement-floating) .label-text-wrapper:dir(rtl) {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the textarea does not\n * overlap the label.\n */\n:host(.textarea-label-placement-stacked) textarea,\n:host(.textarea-label-placement-floating) textarea,\n:host(.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 8px;\n  margin-bottom: 0px;\n}\n\n/**\n * This makes the label sit over the textarea\n * when the textarea is blurred and has no value.\n */\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The textarea should be hidden when the label\n * is on top of the textarea. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.textarea-label-placement-floating) textarea {\n  opacity: 0;\n}\n\n:host(.has-focus.textarea-label-placement-floating) textarea,\n:host(.has-value.textarea-label-placement-floating) textarea {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.has-focus.textarea-label-placement-floating) .label-text-wrapper,\n:host(.has-value.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.textarea-fill-solid) {\n  --background: var(--ion-color-step-50, #f2f2f2);\n  --border-color: var(--ion-color-step-500, gray);\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n}\n\n/**\n * The solid fill style has a border\n * at the bottom of the textarea wrapper.\n * As a result, the border on the \"bottom\n * content\" is not needed.\n */\n:host(.textarea-fill-solid) .textarea-wrapper {\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * If the textarea has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.textarea-fill-solid.ion-valid),\n:host(.textarea-fill-solid.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n:host(.textarea-fill-solid) .textarea-bottom {\n  border-top: none;\n}\n\n/**\n * Background and border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.textarea-fill-solid:hover) {\n    --background: var(--ion-color-step-100, #e6e6e6);\n    --border-color: var(--ion-color-step-750, #404040);\n  }\n}\n/**\n * Background and border should be\n * much darker on focus.\n */\n:host(.textarea-fill-solid.has-focus) {\n  --background: var(--ion-color-step-150, #d9d9d9);\n  --border-color: var(--ion-color-step-750, #404040);\n}\n\n:host(.textarea-fill-solid) .textarea-wrapper {\n  /**\n   * Only the top left and top right borders should.\n   * have a radius when using a solid fill.\n   */\n  border-top-left-radius: var(--border-radius);\n  border-top-right-radius: var(--border-radius);\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\n:host-context([dir=rtl]):host(.textarea-fill-solid) .textarea-wrapper, :host-context([dir=rtl]).textarea-fill-solid .textarea-wrapper {\n  border-top-left-radius: var(--border-radius);\n  border-top-right-radius: var(--border-radius);\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-fill-solid) .textarea-wrapper:dir(rtl) {\n    border-top-left-radius: var(--border-radius);\n    border-top-right-radius: var(--border-radius);\n    border-bottom-right-radius: 0px;\n    border-bottom-left-radius: 0px;\n  }\n}\n\n:host(.textarea-fill-solid.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.has-focus.textarea-fill-solid.textarea-label-placement-floating) .label-text-wrapper,\n:host(.has-value.textarea-fill-solid.textarea-label-placement-floating) .label-text-wrapper {\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.textarea-fill-outline) {\n  --border-color: var(--ion-color-step-300, #b3b3b3);\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n}\n\n:host(.textarea-fill-outline.textarea-shape-round) {\n  --border-radius: 28px;\n  --padding-start: 32px;\n  --padding-end: 32px;\n}\n\n/**\n * If the textarea has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.textarea-fill-outline.ion-valid),\n:host(.textarea-fill-outline.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.textarea-fill-outline:hover) {\n    --border-color: var(--ion-color-step-750, #404040);\n  }\n}\n/**\n * The border should get thicker\n * and take on component color when\n * the textarea is focused.\n */\n:host(.textarea-fill-outline.has-focus) {\n  --border-width: 2px;\n  --border-color: var(--highlight-color);\n}\n\n/**\n * The bottom content should never have\n * a border with the outline style.\n */\n:host(.textarea-fill-outline) .textarea-bottom {\n  border-top: none;\n}\n\n/**\n * Outline textarea do not have a bottom border.\n * Instead, they have a border that wraps the\n * textarea + label.\n */\n:host(.textarea-fill-outline) .textarea-wrapper {\n  border-bottom: none;\n}\n\n:host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  position: absolute;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n:host-context([dir=rtl]):host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-fill-outline.textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-fill-outline.textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper:dir(rtl), :host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper:dir(rtl) {\n    transform-origin: right top;\n  }\n}\n\n/**\n * The label should appear on top of an outline\n * container that overlaps it so it is always clickable.\n */\n:host(.textarea-fill-outline) .label-text-wrapper,\n:host(.textarea-fill-outline) .label-text-wrapper {\n  position: relative;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.has-focus.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper,\n:host(.has-value.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper,\n:host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper {\n  transform: translateY(-32%) scale(0.75);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(\n    (100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75\n  );\n}\n\n/**\n * This ensures that the textarea does not\n * overlap the floating label while still\n * remaining visually centered.\n */\n:host(.textarea-fill-outline.textarea-label-placement-stacked) textarea,\n:host(.textarea-fill-outline.textarea-label-placement-floating) textarea,\n:host(.textarea-fill-outline.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-fill-outline.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 12px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-container {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-start,\n:host(.textarea-fill-outline) .textarea-outline-end {\n  pointer-events: none;\n}\n\n/**\n * By default, each piece of the container should have\n * a top and bottom border. This gives the appearance\n * of a unified container with a border.\n */\n:host(.textarea-fill-outline) .textarea-outline-start,\n:host(.textarea-fill-outline) .textarea-outline-notch,\n:host(.textarea-fill-outline) .textarea-outline-end {\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * Ensures long labels do not cause the notch to flow\n * out of bounds.\n */\n:host(.textarea-fill-outline) .textarea-outline-notch {\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * This element ensures that the notch used\n * the size of the scaled text so that the\n * border cut out is the correct width.\n * The text in this element should not\n * be interactive.\n */\n:host(.textarea-fill-outline) .notch-spacer {\n  /**\n   * We need $textarea-md-floating-label-padding of padding on the right.\n   * However, we also subtracted $textarea-md-floating-label-padding from\n   * the width of .textarea-outline-start\n   * to create space, so we need to take\n   * that into consideration here.\n   */\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  font-size: calc(1em * 0.75);\n  opacity: 0;\n  pointer-events: none;\n  /**\n   * The spacer currently inherits\n   * border-box sizing from the Ionic reset styles.\n   * However, we do not want to include padding in\n   * the calculation of the element dimensions.\n   * This code can be removed if textarea is updated\n   * to use the Shadow DOM.\n   */\n  box-sizing: content-box;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-start {\n  border-top-left-radius: var(--border-radius);\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: var(--border-radius);\n  -webkit-border-start: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-start: var(--border-width) var(--border-style) var(--border-color);\n  /**\n   * There should be spacing between the translated text\n   * and .textarea-outline-start. However, we can't add this\n   * spacing onto the notch because it would cause the\n   * label to look like it is not aligned with the\n   * text textarea. Instead, we subtract a few pixels from\n   * this element.\n   */\n  width: calc(var(--padding-start) - 4px);\n}\n:host-context([dir=rtl]):host(.textarea-fill-outline) .textarea-outline-start, :host-context([dir=rtl]).textarea-fill-outline .textarea-outline-start {\n  border-top-left-radius: 0px;\n  border-top-right-radius: var(--border-radius);\n  border-bottom-right-radius: var(--border-radius);\n  border-bottom-left-radius: 0px;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-fill-outline) .textarea-outline-start:dir(rtl) {\n    border-top-left-radius: 0px;\n    border-top-right-radius: var(--border-radius);\n    border-bottom-right-radius: var(--border-radius);\n    border-bottom-left-radius: 0px;\n  }\n}\n\n:host(.textarea-fill-outline) .textarea-outline-end {\n  -webkit-border-end: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-end: var(--border-width) var(--border-style) var(--border-color);\n  border-top-left-radius: 0px;\n  border-top-right-radius: var(--border-radius);\n  border-bottom-right-radius: var(--border-radius);\n  border-bottom-left-radius: 0px;\n  /**\n   * The ending outline fragment\n   * should take up the remaining free space.\n   */\n  flex-grow: 1;\n}\n:host-context([dir=rtl]):host(.textarea-fill-outline) .textarea-outline-end, :host-context([dir=rtl]).textarea-fill-outline .textarea-outline-end {\n  border-top-left-radius: var(--border-radius);\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: var(--border-radius);\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-fill-outline) .textarea-outline-end:dir(rtl) {\n    border-top-left-radius: var(--border-radius);\n    border-top-right-radius: 0px;\n    border-bottom-right-radius: 0px;\n    border-bottom-left-radius: var(--border-radius);\n  }\n}\n\n/**\n * When the textarea either has focus or a value,\n * there should be a \"cut out\" at the top for\n * the floating/stacked label. We simulate this \"cut out\"\n * by removing the top border from the notch fragment.\n */\n:host(.has-focus.textarea-fill-outline.textarea-label-placement-floating) .textarea-outline-notch,\n:host(.has-value.textarea-fill-outline.textarea-label-placement-floating) .textarea-outline-notch,\n:host(.textarea-fill-outline.textarea-label-placement-stacked) .textarea-outline-notch {\n  border-top: none;\n}\n\n:host {\n  --border-width: 1px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))));\n  --padding-top: 18px;\n  --padding-end: 0px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n  font-size: inherit;\n}\n\n:host(.legacy-textarea) {\n  --padding-top: 10px;\n  --padding-end: 0;\n  --padding-bottom: 11px;\n  --padding-start: 8px;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 8px;\n  margin-bottom: 0;\n}\n\n:host-context(.item-label-stacked),\n:host-context(.item-label-floating) {\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n}\n\n.textarea-bottom .counter {\n  letter-spacing: 0.0333333333em;\n}\n\n:host(:not(.legacy-textarea)) {\n  min-height: 56px;\n}\n\n/**\n * Floating and stacked labels should not\n * push the label down since it it\n * sits on top of the textarea.\n */\n:host(.textarea-label-placement-floating),\n:host(.textarea-label-placement-stacked) {\n  --padding-top: 0px;\n}\n\n/**\n * When the textarea is focused the label should\n * take on the highlight color. This should\n * only apply to floating or stacked labels.\n */\n:host(.textarea-label-placement-floating.has-focus) .label-text-wrapper,\n:host(.textarea-label-placement-stacked.has-focus) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.has-focus.textarea-label-placement-floating.ion-valid) .label-text-wrapper,\n:host(.textarea-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,\n:host(.has-focus.textarea-label-placement-stacked.ion-valid) .label-text-wrapper,\n:host(.textarea-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.legacy-textarea) .native-textarea[disabled],\n:host(.textarea-disabled) {\n  opacity: 0.38;\n}\n\n.textarea-highlight {\n  bottom: -1px;\n  position: absolute;\n  width: 100%;\n  height: 2px;\n  transform: scale(0);\n  transition: transform 200ms;\n  background: var(--highlight-color);\n}\n@supports (inset-inline-start: 0) {\n  .textarea-highlight {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  .textarea-highlight {\n    left: 0;\n  }\n  :host-context([dir=rtl]) .textarea-highlight {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  [dir=rtl] .textarea-highlight {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    .textarea-highlight:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host(.has-focus) .textarea-highlight {\n  transform: scale(1);\n}\n\n/**\n * Adjust the highlight up by 1px\n * so it is not cut off by the\n * the item's line (if one is present).\n */\n:host(.in-item) .textarea-highlight {\n  bottom: 0;\n}\n@supports (inset-inline-start: 0) {\n  :host(.in-item) .textarea-highlight {\n    inset-inline-start: 0;\n  }\n}\n@supports not (inset-inline-start: 0) {\n  :host(.in-item) .textarea-highlight {\n    left: 0;\n  }\n  :host-context([dir=rtl]):host(.in-item) .textarea-highlight, :host-context([dir=rtl]).in-item .textarea-highlight {\n    left: unset;\n    right: unset;\n    right: 0;\n  }\n  @supports selector(:dir(rtl)) {\n    :host(.in-item) .textarea-highlight:dir(rtl) {\n      left: unset;\n      right: unset;\n      right: 0;\n    }\n  }\n}\n\n:host(.textarea-shape-round) {\n  --border-radius: 16px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, forceUpdate, h, writeTask, } from '@stencil/core';\nimport { createLegacyFormController, createNotchController } from \"../../utils/forms/index\";\nimport { inheritAriaAttributes, debounceEvent, findItemLabel, inheritAttributes } from \"../../utils/helpers\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { createSlotMutationController } from \"../../utils/slot-mutation-controller\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from '../../global/ionic-global';\nimport { getCounterText } from '../input/input.utils';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot label - The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)\n */\nexport class Textarea {\n  constructor() {\n    this.inputId = `ion-textarea-${textareaIds++}`;\n    /**\n     * `true` if the textarea was cleared as a result of the user typing\n     * with `clearOnEdit` enabled.\n     *\n     * Resets when the textarea loses focus.\n     */\n    this.didTextareaClearOnEdit = false;\n    this.inheritedAttributes = {};\n    // This flag ensures we log the deprecation warning at most once.\n    this.hasLoggedDeprecationWarning = false;\n    // `Event` type is used instead of `InputEvent`\n    // since the types from Stencil are not derived\n    // from the element (e.g. textarea and input\n    // should be InputEvent, but all other elements\n    // should be Event).\n    this.onInput = (ev) => {\n      const input = ev.target;\n      if (input) {\n        this.value = input.value || '';\n      }\n      this.emitInputChange(ev);\n    };\n    this.onChange = (ev) => {\n      this.emitValueChange(ev);\n    };\n    this.onFocus = (ev) => {\n      this.hasFocus = true;\n      this.focusedValue = this.value;\n      this.focusChange();\n      this.ionFocus.emit(ev);\n    };\n    this.onBlur = (ev) => {\n      this.hasFocus = false;\n      this.focusChange();\n      if (this.focusedValue !== this.value) {\n        /**\n         * Emits the `ionChange` event when the textarea value\n         * is different than the value when the textarea was focused.\n         */\n        this.emitValueChange(ev);\n      }\n      this.didTextareaClearOnEdit = false;\n      this.ionBlur.emit(ev);\n    };\n    this.onKeyDown = (ev) => {\n      this.checkClearOnEdit(ev);\n    };\n    this.hasFocus = false;\n    this.color = undefined;\n    this.autocapitalize = 'none';\n    this.autofocus = false;\n    this.clearOnEdit = false;\n    this.debounce = undefined;\n    this.disabled = false;\n    this.fill = undefined;\n    this.inputmode = undefined;\n    this.enterkeyhint = undefined;\n    this.maxlength = undefined;\n    this.minlength = undefined;\n    this.name = this.inputId;\n    this.placeholder = undefined;\n    this.readonly = false;\n    this.required = false;\n    this.spellcheck = false;\n    this.cols = undefined;\n    this.rows = undefined;\n    this.wrap = undefined;\n    this.autoGrow = false;\n    this.value = '';\n    this.counter = false;\n    this.counterFormatter = undefined;\n    this.errorText = undefined;\n    this.helperText = undefined;\n    this.label = undefined;\n    this.labelPlacement = 'start';\n    this.legacy = undefined;\n    this.shape = undefined;\n  }\n  debounceChanged() {\n    const { ionInput, debounce, originalIonInput } = this;\n    /**\n     * If debounce is undefined, we have to manually revert the ionInput emitter in case\n     * debounce used to be set to a number. Otherwise, the event would stay debounced.\n     */\n    this.ionInput = debounce === undefined ? originalIonInput !== null && originalIonInput !== void 0 ? originalIonInput : ionInput : debounceEvent(ionInput, debounce);\n  }\n  disabledChanged() {\n    this.emitStyle();\n  }\n  /**\n   * Update the native input element when the value changes\n   */\n  valueChanged() {\n    const nativeInput = this.nativeInput;\n    const value = this.getValue();\n    if (nativeInput && nativeInput.value !== value) {\n      nativeInput.value = value;\n    }\n    this.runAutoGrow();\n    this.emitStyle();\n  }\n  connectedCallback() {\n    const { el } = this;\n    this.legacyFormController = createLegacyFormController(el);\n    this.slotMutationController = createSlotMutationController(el, 'label', () => forceUpdate(this));\n    this.notchController = createNotchController(el, () => this.notchSpacerEl, () => this.labelSlot);\n    this.emitStyle();\n    this.debounceChanged();\n    if (Build.isBrowser) {\n      document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n        detail: el,\n      }));\n    }\n  }\n  disconnectedCallback() {\n    if (Build.isBrowser) {\n      document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n        detail: this.el,\n      }));\n    }\n    if (this.slotMutationController) {\n      this.slotMutationController.destroy();\n      this.slotMutationController = undefined;\n    }\n    if (this.notchController) {\n      this.notchController.destroy();\n      this.notchController = undefined;\n    }\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['data-form-type', 'title', 'tabindex']));\n  }\n  componentDidLoad() {\n    this.originalIonInput = this.ionInput;\n    this.runAutoGrow();\n  }\n  componentDidRender() {\n    var _a;\n    (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();\n  }\n  /**\n   * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n   * `textarea.focus()`.\n   */\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n  /**\n   * Returns the native `<textarea>` element used under the hood.\n   */\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n  emitStyle() {\n    if (this.legacyFormController.hasLegacyControl()) {\n      this.ionStyle.emit({\n        interactive: true,\n        textarea: true,\n        input: true,\n        'interactive-disabled': this.disabled,\n        'has-placeholder': this.placeholder !== undefined,\n        'has-value': this.hasValue(),\n        'has-focus': this.hasFocus,\n      });\n    }\n  }\n  /**\n   * Emits an `ionChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  emitValueChange(event) {\n    const { value } = this;\n    // Checks for both null and undefined values\n    const newValue = value == null ? value : value.toString();\n    // Emitting a value change should update the internal state for tracking the focused value\n    this.focusedValue = newValue;\n    this.ionChange.emit({ value: newValue, event });\n  }\n  /**\n   * Emits an `ionInput` event.\n   */\n  emitInputChange(event) {\n    const { value } = this;\n    this.ionInput.emit({ value, event });\n  }\n  runAutoGrow() {\n    if (this.nativeInput && this.autoGrow) {\n      writeTask(() => {\n        var _a;\n        if (this.textareaWrapper) {\n          // Replicated value is an attribute to be used in the stylesheet\n          // to set the inner contents of a pseudo element.\n          this.textareaWrapper.dataset.replicatedValue = (_a = this.value) !== null && _a !== void 0 ? _a : '';\n        }\n      });\n    }\n  }\n  /**\n   * Check if we need to clear the text input if clearOnEdit is enabled\n   */\n  checkClearOnEdit(ev) {\n    if (!this.clearOnEdit) {\n      return;\n    }\n    /**\n     * Clear the textarea if the control has not been previously cleared\n     * during focus.\n     */\n    if (!this.didTextareaClearOnEdit && this.hasValue()) {\n      this.value = '';\n      this.emitInputChange(ev);\n    }\n    this.didTextareaClearOnEdit = true;\n  }\n  focusChange() {\n    this.emitStyle();\n  }\n  hasValue() {\n    return this.getValue() !== '';\n  }\n  getValue() {\n    return this.value || '';\n  }\n  // TODO: FW-2876 - Remove this render function\n  renderLegacyTextarea() {\n    if (!this.hasLoggedDeprecationWarning) {\n      printIonWarning(`ion-textarea now requires providing a label with either the \"label\" property or the \"aria-label\" attribute. To migrate, remove any usage of \"ion-label\" and pass the label text to either the \"label\" property or the \"aria-label\" attribute.\n\nExample: <ion-textarea label=\"Comments\"></ion-textarea>\nExample with aria-label: <ion-textarea aria-label=\"Comments\"></ion-textarea>\n\nFor textareas that do not render the label immediately next to the input, developers may continue to use \"ion-label\" but must manually associate the label with the textarea by using \"aria-labelledby\".\n\nDevelopers can use the \"legacy\" property to continue using the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.`, this.el);\n      this.hasLoggedDeprecationWarning = true;\n    }\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const labelId = this.inputId + '-lbl';\n    const label = findItemLabel(this.el);\n    if (label) {\n      label.id = labelId;\n    }\n    return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n        [mode]: true,\n        'legacy-textarea': true,\n      }) }, h(\"div\", { class: \"textarea-legacy-wrapper\", ref: (el) => (this.textareaWrapper = el) }, h(\"textarea\", Object.assign({ class: \"native-textarea\", \"aria-labelledby\": label ? label.id : null, ref: (el) => (this.nativeInput = el), autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, disabled: this.disabled, maxLength: this.maxlength, minLength: this.minlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, this.inheritedAttributes), value))));\n  }\n  renderLabel() {\n    const { label } = this;\n    return (h(\"div\", { class: {\n        'label-text-wrapper': true,\n        'label-text-wrapper-hidden': !this.hasLabel,\n      } }, label === undefined ? h(\"slot\", { name: \"label\" }) : h(\"div\", { class: \"label-text\" }, label)));\n  }\n  /**\n   * Gets any content passed into the `label` slot,\n   * not the <slot> definition.\n   */\n  get labelSlot() {\n    return this.el.querySelector('[slot=\"label\"]');\n  }\n  /**\n   * Returns `true` if label content is provided\n   * either by a prop or a content. If you want\n   * to get the plaintext value of the label use\n   * the `labelText` getter instead.\n   */\n  get hasLabel() {\n    return this.label !== undefined || this.labelSlot !== null;\n  }\n  /**\n   * Renders the border container when fill=\"outline\".\n   */\n  renderLabelContainer() {\n    const mode = getIonMode(this);\n    const hasOutlineFill = mode === 'md' && this.fill === 'outline';\n    if (hasOutlineFill) {\n      /**\n       * The outline fill has a special outline\n       * that appears around the textarea and the label.\n       * Certain stacked and floating label placements cause the\n       * label to translate up and create a \"cut out\"\n       * inside of that border by using the notch-spacer element.\n       */\n      return [\n        h(\"div\", { class: \"textarea-outline-container\" }, h(\"div\", { class: \"textarea-outline-start\" }), h(\"div\", { class: {\n            'textarea-outline-notch': true,\n            'textarea-outline-notch-hidden': !this.hasLabel,\n          } }, h(\"div\", { class: \"notch-spacer\", \"aria-hidden\": \"true\", ref: (el) => (this.notchSpacerEl = el) }, this.label)), h(\"div\", { class: \"textarea-outline-end\" })),\n        this.renderLabel(),\n      ];\n    }\n    /**\n     * If not using the outline style,\n     * we can render just the label.\n     */\n    return this.renderLabel();\n  }\n  /**\n   * Renders the helper text or error text values\n   */\n  renderHintText() {\n    const { helperText, errorText } = this;\n    return [h(\"div\", { class: \"helper-text\" }, helperText), h(\"div\", { class: \"error-text\" }, errorText)];\n  }\n  renderCounter() {\n    const { counter, maxlength, counterFormatter, value } = this;\n    if (counter !== true || maxlength === undefined) {\n      return;\n    }\n    return h(\"div\", { class: \"counter\" }, getCounterText(value, maxlength, counterFormatter));\n  }\n  /**\n   * Responsible for rendering helper text,\n   * error text, and counter. This element should only\n   * be rendered if hint text is set or counter is enabled.\n   */\n  renderBottomContent() {\n    const { counter, helperText, errorText, maxlength } = this;\n    /**\n     * undefined and empty string values should\n     * be treated as not having helper/error text.\n     */\n    const hasHintText = !!helperText || !!errorText;\n    const hasCounter = counter === true && maxlength !== undefined;\n    if (!hasHintText && !hasCounter) {\n      return;\n    }\n    return (h(\"div\", { class: \"textarea-bottom\" }, this.renderHintText(), this.renderCounter()));\n  }\n  renderTextarea() {\n    const { inputId, disabled, fill, shape, labelPlacement } = this;\n    const mode = getIonMode(this);\n    const value = this.getValue();\n    const inItem = hostContext('ion-item', this.el);\n    const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;\n    return (h(Host, { class: createColorClasses(this.color, {\n        [mode]: true,\n        'has-value': this.hasValue(),\n        'has-focus': this.hasFocus,\n        [`textarea-fill-${fill}`]: fill !== undefined,\n        [`textarea-shape-${shape}`]: shape !== undefined,\n        [`textarea-label-placement-${labelPlacement}`]: true,\n        'textarea-disabled': disabled,\n      }) }, h(\"label\", { class: \"textarea-wrapper\" }, this.renderLabelContainer(), h(\"div\", { class: \"native-wrapper\", ref: (el) => (this.textareaWrapper = el) }, h(\"textarea\", Object.assign({ class: \"native-textarea\", ref: (el) => (this.nativeInput = el), id: inputId, disabled: disabled, autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, minLength: this.minlength, maxLength: this.maxlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, this.inheritedAttributes), value)), shouldRenderHighlight && h(\"div\", { class: \"textarea-highlight\" })), this.renderBottomContent()));\n  }\n  render() {\n    const { legacyFormController } = this;\n    return legacyFormController.hasLegacyControl() ? this.renderLegacyTextarea() : this.renderTextarea();\n  }\n  static get is() { return \"ion-textarea\"; }\n  static get encapsulation() { return \"scoped\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"textarea.ios.scss\"],\n      \"md\": [\"textarea.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"textarea.ios.css\"],\n      \"md\": [\"textarea.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true\n      },\n      \"autocapitalize\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n        },\n        \"attribute\": \"autocapitalize\",\n        \"reflect\": false,\n        \"defaultValue\": \"'none'\"\n      },\n      \"autofocus\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"This Boolean attribute lets you specify that a form control should have input focus when the page loads.\"\n        },\n        \"attribute\": \"autofocus\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"clearOnEdit\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the value will be cleared after focus upon edit.\"\n        },\n        \"attribute\": \"clear-on-edit\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"debounce\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.\"\n        },\n        \"attribute\": \"debounce\",\n        \"reflect\": false\n      },\n      \"disabled\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot interact with the textarea.\"\n        },\n        \"attribute\": \"disabled\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"fill\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'outline' | 'solid'\",\n          \"resolved\": \"\\\"outline\\\" | \\\"solid\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The fill for the item. If `\\\"solid\\\"` the item will have a background. If\\n`\\\"outline\\\"` the item will be transparent with a border. Only available in `md` mode.\"\n        },\n        \"attribute\": \"fill\",\n        \"reflect\": false\n      },\n      \"inputmode\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n          \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n        },\n        \"attribute\": \"inputmode\",\n        \"reflect\": false\n      },\n      \"enterkeyhint\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n          \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n        },\n        \"attribute\": \"enterkeyhint\",\n        \"reflect\": false\n      },\n      \"maxlength\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"This attribute specifies the maximum number of characters that the user can enter.\"\n        },\n        \"attribute\": \"maxlength\",\n        \"reflect\": false\n      },\n      \"minlength\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"This attribute specifies the minimum number of characters that the user can enter.\"\n        },\n        \"attribute\": \"minlength\",\n        \"reflect\": false\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the control, which is submitted with the form data.\"\n        },\n        \"attribute\": \"name\",\n        \"reflect\": false,\n        \"defaultValue\": \"this.inputId\"\n      },\n      \"placeholder\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Instructional text that shows before the input has a value.\"\n        },\n        \"attribute\": \"placeholder\",\n        \"reflect\": false\n      },\n      \"readonly\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user cannot modify the value.\"\n        },\n        \"attribute\": \"readonly\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"required\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n        },\n        \"attribute\": \"required\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"spellcheck\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n        },\n        \"attribute\": \"spellcheck\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"cols\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.\"\n        },\n        \"attribute\": \"cols\",\n        \"reflect\": false\n      },\n      \"rows\": {\n        \"type\": \"number\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"number\",\n          \"resolved\": \"number | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The number of visible text lines for the control.\"\n        },\n        \"attribute\": \"rows\",\n        \"reflect\": false\n      },\n      \"wrap\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'hard' | 'soft' | 'off'\",\n          \"resolved\": \"\\\"hard\\\" | \\\"off\\\" | \\\"soft\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Indicates how the control wraps text.\"\n        },\n        \"attribute\": \"wrap\",\n        \"reflect\": false\n      },\n      \"autoGrow\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the textarea container will grow and shrink based\\non the contents of the textarea.\"\n        },\n        \"attribute\": \"auto-grow\",\n        \"reflect\": true,\n        \"defaultValue\": \"false\"\n      },\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string | null\",\n          \"resolved\": \"null | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The value of the textarea.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"''\"\n      },\n      \"counter\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, a character counter will display the ratio of characters used and the total character limit.\\nDevelopers must also set the `maxlength` property for the counter to be calculated correctly.\"\n        },\n        \"attribute\": \"counter\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"counterFormatter\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"(inputLength: number, maxLength: number) => string\",\n          \"resolved\": \"((inputLength: number, maxLength: number) => string) | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A callback used to format the counter text.\\nBy default the counter text is set to \\\"itemLength / maxLength\\\".\"\n        }\n      },\n      \"errorText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Text that is placed under the textarea and displayed when an error is detected.\"\n        },\n        \"attribute\": \"error-text\",\n        \"reflect\": false\n      },\n      \"helperText\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Text that is placed under the textarea and displayed when no error is detected.\"\n        },\n        \"attribute\": \"helper-text\",\n        \"reflect\": false\n      },\n      \"label\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The visible label associated with the textarea.\\n\\nUse this if you need to render a plaintext label.\\n\\nThe `label` property will take priority over the `label` slot if both are used.\"\n        },\n        \"attribute\": \"label\",\n        \"reflect\": false\n      },\n      \"labelPlacement\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'start' | 'end' | 'floating' | 'stacked' | 'fixed'\",\n          \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Where to place the label relative to the textarea.\\n`\\\"start\\\"`: The label will appear to the left of the textarea in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the textarea in LTR and to the left in RTL.\\n`\\\"floating\\\"`: The label will appear smaller and above the textarea when the textarea is focused or it has a value. Otherwise it will appear on top of the textarea.\\n`\\\"stacked\\\"`: The label will appear smaller and above the textarea regardless even when the textarea is blurred or has no value.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\"\n        },\n        \"attribute\": \"label-placement\",\n        \"reflect\": false,\n        \"defaultValue\": \"'start'\"\n      },\n      \"legacy\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Set the `legacy` property to `true` to forcibly use the legacy form control markup.\\nIonic will only opt components in to the modern form markup when they are\\nusing either the `aria-label` attribute or the default slot that contains\\nthe label text. As a result, the `legacy` property should only be used as\\nan escape hatch when you want to avoid this automatic opt-in behavior.\\nNote that this property will be removed in an upcoming major release\\nof Ionic, and all form components will be opted-in to using the modern form markup.\"\n        },\n        \"attribute\": \"legacy\",\n        \"reflect\": false\n      },\n      \"shape\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"'round'\",\n          \"resolved\": \"\\\"round\\\" | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The shape of the textarea. If \\\"round\\\" it will have an increased border radius.\"\n        },\n        \"attribute\": \"shape\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"hasFocus\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionChange\",\n        \"name\": \"ionChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The `ionChange` event is fired when the user modifies the textarea's value.\\nUnlike the `ionInput` event, the `ionChange` event is fired when\\nthe element loses focus after its value has been modified.\"\n        },\n        \"complexType\": {\n          \"original\": \"TextareaChangeEventDetail\",\n          \"resolved\": \"TextareaChangeEventDetail\",\n          \"references\": {\n            \"TextareaChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./textarea-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionInput\",\n        \"name\": \"ionInput\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The `ionInput` event is fired each time the user modifies the textarea's value.\\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\\nto the textarea's value. This typically happens for each keystroke as the user types.\\n\\nWhen `clearOnEdit` is enabled, the `ionInput` event will be fired when\\nthe user clears the textarea by performing a keydown event.\"\n        },\n        \"complexType\": {\n          \"original\": \"TextareaInputEventDetail\",\n          \"resolved\": \"TextareaInputEventDetail\",\n          \"references\": {\n            \"TextareaInputEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./textarea-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionStyle\",\n        \"name\": \"ionStyle\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the styles change.\"\n        },\n        \"complexType\": {\n          \"original\": \"StyleEventDetail\",\n          \"resolved\": \"StyleEventDetail\",\n          \"references\": {\n            \"StyleEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionBlur\",\n        \"name\": \"ionBlur\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input loses focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"FocusEvent\",\n          \"resolved\": \"FocusEvent\",\n          \"references\": {\n            \"FocusEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionFocus\",\n        \"name\": \"ionFocus\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the input has focus.\"\n        },\n        \"complexType\": {\n          \"original\": \"FocusEvent\",\n          \"resolved\": \"FocusEvent\",\n          \"references\": {\n            \"FocusEvent\": {\n              \"location\": \"global\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"setFocus\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\\n`textarea.focus()`.\",\n          \"tags\": []\n        }\n      },\n      \"getInputElement\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<HTMLTextAreaElement>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            },\n            \"HTMLTextAreaElement\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<HTMLTextAreaElement>\"\n        },\n        \"docs\": {\n          \"text\": \"Returns the native `<textarea>` element used under the hood.\",\n          \"tags\": []\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"debounce\",\n        \"methodName\": \"debounceChanged\"\n      }, {\n        \"propName\": \"disabled\",\n        \"methodName\": \"disabledChanged\"\n      }, {\n        \"propName\": \"value\",\n        \"methodName\": \"valueChanged\"\n      }];\n  }\n}\nlet textareaIds = 0;\n"],"mappings":"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"}