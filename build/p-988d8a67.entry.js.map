{"version":3,"names":["importMermaid","async","Promise","resolve","reject","isNode","window","script","document","createElement","type","loadedChannel","errorChannel","innerHTML","onLoaded","removeEventListener","addEventListener","onError","error","detail","body","appendChild","geovMermaidCss","GeovMermaid","constructor","hostRef","this","value","svg","undefined","componentWillLoad","mermaid","componentDidLoad","extractChartString","_a","_b","firstChild","slotElement","assignedNodes","nodeType","data","createSVG","chart","render","toString","h","Host","style","display","onSlotchange","ref","el","color"],"sources":["node_modules/@geovistory/design-system-web/dist/collection/lib/importMermaid.js","node_modules/@geovistory/design-system-web/dist/collection/components/geov-mermaid/geov-mermaid.css?tag=geov-mermaid&encapsulation=shadow","node_modules/@geovistory/design-system-web/dist/collection/components/geov-mermaid/geov-mermaid.js"],"sourcesContent":["import { isNode } from \"./isNode\";\n/**\n * Load and return mermaid library from CDN in browsers.\n * In node server environment returns null.\n * @returns Mermaid (in browser) or null (in server)\n */\nexport const importMermaid = async () => new Promise((resolve, reject) => {\n  // if we are on a node server resolve with null\n  if (isNode())\n    return resolve(null);\n  // if mermaid is already defined resolve it\n  if ('mermaid' in window) {\n    return resolve(window['mermaid']);\n  }\n  // create new script element\n  const script = document.createElement(`script`);\n  // set type\n  script.type = 'module';\n  // create event names\n  const loadedChannel = 'mermaid-loaded';\n  const errorChannel = 'mermaid-loading-error';\n  script.innerHTML = `\n      try {\n        // load mermaid\n        var mermaid = await import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs');\n\n        // add to window\n        window.mermaid = mermaid.default;\n\n        // dispatch loaded event\n        window.dispatchEvent(new Event(\"${loadedChannel}\"));\n\n      } catch (error) {\n        // dispatch error event\n        window.dispatchEvent(new CustomEvent(\"${errorChannel}\", {detail: error}));\n      }\n    `;\n  // callback on mermaid loaded\n  const onLoaded = () => {\n    // unregister the event listener\n    window.removeEventListener(loadedChannel, onLoaded);\n    // resolve\n    resolve(window['mermaid']);\n  };\n  // register on load callback and resolve Plotly\n  window.addEventListener(loadedChannel, onLoaded);\n  // callback on mermaid loading error\n  const onError = error => {\n    // unregister the event listener\n    window.removeEventListener(errorChannel, onError);\n    // resolve\n    reject(error.detail);\n  };\n  // register on load callback and resolve Plotly\n  window.addEventListener(errorChannel, onError);\n  // append script to load Plotly from CDN to document\n  document.body.appendChild(script);\n});\n//# sourceMappingURL=importMermaid.js.map\n",":host {\n  display: block;\n}\n","import { h, Host } from \"@stencil/core\";\nimport { importMermaid } from \"../../lib/importMermaid\";\n/**\n * This is a simple wrapper around [mermaid.js](https://mermaid.js.org).\n *\n * Develop your chart in the [mermaid live editor](https://mermaid.live/) and wrap it with this component.\n */\nexport class GeovMermaid {\n  constructor() {\n    this.value = '';\n    this.svg = undefined;\n    this.error = undefined;\n  }\n  async componentWillLoad() {\n    this.mermaid = await importMermaid();\n  }\n  async componentDidLoad() {\n    this.createSVG;\n  }\n  extractChartString() {\n    var _a, _b;\n    const firstChild = (_b = (_a = this.slotElement) === null || _a === void 0 ? void 0 : _a.assignedNodes()) === null || _b === void 0 ? void 0 : _b[0];\n    if ((firstChild === null || firstChild === void 0 ? void 0 : firstChild.nodeType) !== 3) {\n      return (this.error = 'Please place (only) the mermaid chart string in the geov-mermaid element');\n    }\n    return firstChild.data;\n  }\n  async createSVG() {\n    if (!this.mermaid)\n      return;\n    const chart = this.extractChartString();\n    try {\n      const { svg } = await this.mermaid.render('graphDiv', chart);\n      this.svg = svg;\n    }\n    catch (error) {\n      this.error = error.toString();\n    }\n  }\n  render() {\n    return (h(Host, null, h(\"span\", { style: { display: 'none' } }, h(\"slot\", { onSlotchange: () => this.createSVG(), ref: (el) => (this.slotElement = el) })), h(\"div\", { innerHTML: this.svg }), this.error && h(\"pre\", { style: { color: 'red' } }, this.error)));\n  }\n  static get is() { return \"geov-mermaid\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-mermaid.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-mermaid.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"value\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false,\n        \"defaultValue\": \"''\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"svg\": {},\n      \"error\": {}\n    };\n  }\n}\n//# sourceMappingURL=geov-mermaid.js.map\n"],"mappings":"sFAMO,MAAMA,EAAgBC,SAAY,IAAIC,SAAQ,CAACC,EAASC,KAE7D,GAAIC,IACF,OAAOF,EAAQ,MAEjB,GAAI,YAAaG,OAAQ,CACvB,OAAOH,EAAQG,OAAO,WAC1B,CAEE,MAAMC,EAASC,SAASC,cAAc,UAEtCF,EAAOG,KAAO,SAEd,MAAMC,EAAgB,iBACtB,MAAMC,EAAe,wBACrBL,EAAOM,UAAY,uSASqBF,oHAIMC,wCAI9C,MAAME,EAAW,KAEfR,OAAOS,oBAAoBJ,EAAeG,GAE1CX,EAAQG,OAAO,WAAW,EAG5BA,OAAOU,iBAAiBL,EAAeG,GAEvC,MAAMG,EAAUC,IAEdZ,OAAOS,oBAAoBH,EAAcK,GAEzCb,EAAOc,EAAMC,OAAO,EAGtBb,OAAOU,iBAAiBJ,EAAcK,GAEtCT,SAASY,KAAKC,YAAYd,EAAO,ICxDnC,MAAMe,EAAiB,uB,MCOVC,EAAW,MACtB,WAAAC,CAAAC,G,UACEC,KAAKC,MAAQ,GACbD,KAAKE,IAAMC,UACXH,KAAKR,MAAQW,S,CAEf,uBAAMC,GACJJ,KAAKK,cAAgB/B,G,CAEvB,sBAAMgC,G,CAGN,kBAAAC,GACE,IAAIC,EAAIC,EACR,MAAMC,GAAcD,GAAMD,EAAKR,KAAKW,eAAiB,MAAQH,SAAY,OAAS,EAAIA,EAAGI,mBAAqB,MAAQH,SAAY,OAAS,EAAIA,EAAG,GAClJ,IAAKC,IAAe,MAAQA,SAAoB,OAAS,EAAIA,EAAWG,YAAc,EAAG,CACvF,OAAQb,KAAKR,MAAQ,0E,CAEvB,OAAOkB,EAAWI,I,CAEpB,eAAMC,GACJ,IAAKf,KAAKK,QACR,OACF,MAAMW,EAAQhB,KAAKO,qBACnB,IACE,MAAML,IAAEA,SAAcF,KAAKK,QAAQY,OAAO,WAAYD,GACtDhB,KAAKE,IAAMA,C,CAEb,MAAOV,GACLQ,KAAKR,MAAQA,EAAM0B,U,EAGvB,MAAAD,GACE,OAAQE,EAAEC,EAAM,KAAMD,EAAE,OAAQ,CAAEE,MAAO,CAAEC,QAAS,SAAYH,EAAE,OAAQ,CAAEI,aAAc,IAAMvB,KAAKe,YAAaS,IAAMC,GAAQzB,KAAKW,YAAcc,KAASN,EAAE,MAAO,CAAEhC,UAAWa,KAAKE,MAAQF,KAAKR,OAAS2B,EAAE,MAAO,CAAEE,MAAO,CAAEK,MAAO,QAAW1B,KAAKR,O"}