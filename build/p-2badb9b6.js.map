{"version":3,"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","SCROLL_AMOUNT_PADDING","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","_a","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","undefined","mode","KeyboardResize","None","focusIn","async","hasAttribute","removeAttribute","jsSetFocus","setManualFocus","el","setAttribute","focus","scrollData","raf","click","window","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","scrollByPoint","getScrollElement","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","INPUT_BLURRING","startInputShims","config","platform","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","Keyboard","getResizeMode","registerInput","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","findClosestIonContent","rmFn","isDateInput","unregisterInput","fn","detail"],"sources":["node_modules/@ionic/core/dist/collection/utils/input-shims/hacks/common.js","node_modules/@ionic/core/dist/collection/utils/input-shims/hacks/hide-caret.js","node_modules/@ionic/core/dist/collection/utils/input-shims/hacks/input-blurring.js","node_modules/@ionic/core/dist/collection/utils/input-shims/hacks/scroll-data.js","node_modules/@ionic/core/dist/collection/utils/input-shims/hacks/scroll-padding.js","node_modules/@ionic/core/dist/collection/utils/input-shims/hacks/scroll-assist.js","node_modules/@ionic/core/dist/collection/utils/input-shims/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst cloneMap = new WeakMap();\nexport const relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nexport const isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nexport const SCROLL_AMOUNT_PADDING = 50;\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { addEventListener, removeEventListener } from '../../helpers';\nimport { isFocused, relocateInput } from './common';\nexport const enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { addEventListener, removeEventListener } from '../../helpers';\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nexport const enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { SCROLL_AMOUNT_PADDING } from './common';\nconst SCROLL_ASSIST_SPEED = 0.3;\nexport const getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nexport const setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nexport const setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getScrollElement, scrollByPoint } from '../../content';\nimport { raf } from '../../helpers';\nimport { KeyboardResize } from '../../native/keyboard';\nimport { relocateInput, SCROLL_AMOUNT_PADDING } from './common';\nimport { getScrollData } from './scroll-data';\nimport { setScrollPadding, setClearScrollPaddingListener } from './scroll-padding';\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nexport const enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    /**\n     * Scroll assist should not run again\n     * on inputs that have been manually\n     * focused inside of the scroll assist\n     * implementation.\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { findClosestIonContent } from '../content';\nimport { componentOnReady } from '../helpers';\nimport { Keyboard } from '../native/keyboard';\nimport { enableHideCaretOnScroll } from './hacks/hide-caret';\nimport { enableInputBlurring } from './hacks/input-blurring';\nimport { enableScrollAssist } from './hacks/scroll-assist';\nconst INPUT_BLURRING = true;\nconst SCROLL_ASSIST = true;\nconst HIDE_CARET = true;\nexport const startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (HIDE_CARET && !!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (SCROLL_ASSIST &&\n      !isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (HIDE_CARET && hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (SCROLL_ASSIST && scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n"],"mappings":";;;GAGA,MAAMA,EAAW,IAAIC,QACd,MAAMC,EAAgB,CAACC,EAAaC,EAASC,EAAgBC,EAAiB,EAAGC,EAAsB,SAC5G,GAAIP,EAASQ,IAAIL,KAAiBE,EAAgB,CAChD,MACJ,CACE,GAAIA,EAAgB,CAClBI,EAASN,EAAaC,EAASE,EAAgBC,EACnD,KACO,CACHG,EAAYP,EAAaC,EAC7B,GAGO,MAAMO,EAAaC,GACjBA,IAAUA,EAAMC,cAAcC,cAEvC,MAAML,EAAW,CAACN,EAAaC,EAASE,EAAgBC,EAAsB,SAU5E,MAAMQ,EAAWX,EAAQY,WAEzB,MAAMC,EAAWb,EAAQc,UAAU,OACnCD,EAASE,UAAUC,IAAI,gBACvBH,EAASI,UAAY,EAarB,GAAId,EAAqB,CACvBU,EAASK,SAAW,IACxB,CACEP,EAASQ,YAAYN,GACrBjB,EAASwB,IAAIrB,EAAac,GAC1B,MAAMQ,EAAMtB,EAAYuB,cACxB,MAAMC,EAAKF,EAAIG,MAAQ,MAAQ,MAAQ,KACvCzB,EAAY0B,MAAMC,cAAgB,OAClC1B,EAAQyB,MAAME,UAAY,eAAeJ,OAAQrB,iBAA8B,EAEjF,MAAMI,EAAc,CAACP,EAAaC,KAChC,MAAM4B,EAAQhC,EAASiC,IAAI9B,GAC3B,GAAI6B,EAAO,CACThC,EAASkC,OAAO/B,GAChB6B,EAAMG,QACV,CACEhC,EAAY0B,MAAMC,cAAgB,GAClC1B,EAAQyB,MAAME,UAAY,EAAE,EAOvB,MAAMK,EAAwB;;;GCjE9B,MAAMC,EAA0B,CAAClC,EAAaC,EAASkC,KAC5D,IAAKA,IAAalC,EAAS,CACzB,MAAO,MAGX,CACE,MAAMmC,EAAmBC,IACvB,GAAI7B,EAAUP,GAAU,CACtBF,EAAcC,EAAaC,EAASoC,EAC1C,GAEE,MAAMC,EAAS,IAAMvC,EAAcC,EAAaC,EAAS,OACzD,MAAMsC,EAAY,IAAMH,EAAgB,MACxC,MAAMI,EAAY,IAAMJ,EAAgB,OACxCK,EAAiBN,EAAU,iBAAkBI,GAC7CE,EAAiBN,EAAU,eAAgBK,GAC3CvC,EAAQwC,iBAAiB,OAAQH,GACjC,MAAO,KACLI,EAAoBP,EAAU,iBAAkBI,GAChDG,EAAoBP,EAAU,eAAgBK,GAC9CvC,EAAQyC,oBAAoB,OAAQJ,EAAO,CAC5C;;;GCtBH,MAAMK,EAAgB,gDACf,MAAMC,EAAsB,KACjC,IAAIC,EAAU,KACd,IAAIC,EAAY,MAChB,MAAMxB,EAAMyB,SACZ,MAAMC,EAAW,KACfF,EAAY,IAAI,EAElB,MAAMG,EAAY,KAChBJ,EAAU,IAAI,EAEhB,MAAMK,EAAcC,IAElB,GAAIL,EAAW,CACbA,EAAY,MACZ,MACN,CACI,MAAMM,EAAS9B,EAAIX,cACnB,IAAKyC,EAAQ,CACX,MACN,CAEI,GAAIA,EAAOC,QAAQV,GAAgB,CACjC,MACN,CAEI,MAAMW,EAASH,EAAGI,OAClB,GAAID,IAAWF,EAAQ,CACrB,MACN,CACI,GAAIE,EAAOD,QAAQV,IAAkBW,EAAOE,QAAQb,GAAgB,CAClE,MACN,CACIE,EAAU,MAEVY,YAAW,KACT,IAAKZ,EAAS,CACZO,EAAOM,MACf,IACO,GAAG,EAERjB,EAAiBnB,EAAK,iBAAkB0B,GACxC1B,EAAImB,iBAAiB,UAAWQ,EAAW,MAC3C3B,EAAImB,iBAAiB,WAAYS,EAAY,OAC7C,MAAO,KACLR,EAAoBpB,EAAK,iBAAkB0B,EAAU,MACrD1B,EAAIoB,oBAAoB,UAAWO,EAAW,MAC9C3B,EAAIoB,oBAAoB,WAAYQ,EAAY,MAAM,CACvD;;;GChDH,MAAMS,EAAsB,GACrB,MAAMC,EAAgB,CAAC5D,EAAa6D,EAAWC,KACpD,IAAIC,EACJ,MAAMC,GAAUD,EAAK/D,EAAYwD,QAAQ,0BAA4B,MAAQO,SAAY,EAAIA,EAAK/D,EAClG,OAAOiE,EAAeD,EAAOE,wBAAyBL,EAAUK,wBAAyBJ,EAAgB9D,EAAYuB,cAAc4C,YAAYC,YAC9I,EAEH,MAAMH,EAAiB,CAACI,EAAWC,EAAaR,EAAgBS,KAE9D,MAAMC,EAAWH,EAAUI,IAC3B,MAAMC,EAAcL,EAAUM,OAE9B,MAAMC,EAAiBN,EAAYG,IACnC,MAAMI,EAAoBC,KAAKC,IAAIT,EAAYK,OAAQJ,EAAiBT,GAExE,MAAMkB,EAAcJ,EAAiB,GACrC,MAAMK,EAAiBJ,EAAoB5C,EAE3C,MAAMiD,EAAmBD,EAAiBP,EAC1C,MAAMS,EAAgBH,EAAcR,EAEpC,MAAMY,EAAsBN,KAAKO,MAAMH,EAAmB,GAAKA,EAAmBC,EAAgB,GAAKA,EAAgB,GAGvH,MAAMG,EAAeR,KAAKC,IAAIK,EAAqBZ,EAAWI,GAC9D,MAAMW,EAAWT,KAAKU,IAAIF,GAC1B,MAAMG,EAAWF,EAAW5B,EAC5B,MAAM+B,EAAiBZ,KAAKC,IAAI,IAAKD,KAAKa,IAAI,IAAKF,IACnD,MAAO,CACLH,eACAI,iBACAE,cAAe9B,EACf+B,aAAcrB,EAAWQ,GAAe,EACzC;;;GClCH,MAAMc,EAAoB,mBAmBnB,MAAMC,EAAmB,CAAClC,EAAWmC,EAAeC,KACzD,MAAMC,EAAQrC,EAAUiC,GACxB,GAAII,EAAO,CACTC,aAAaD,EACjB,CACE,GAAIF,EAAgB,EAAG,CACrBnC,EAAUnC,MAAM0E,YAAY,oBAAqB,GAAGJ,MACxD,KACO,CACHnC,EAAUiC,GAAqBrC,YAAW,KACxCI,EAAUnC,MAAM0E,YAAY,oBAAqB,OACjD,GAAIH,EAAe,CACjBA,GACR,IACO,IACP,GAYO,MAAMI,EAAgC,CAACpG,EAAS4D,EAAWyC,KAChE,MAAMC,EAAqB,KACzB,GAAI1C,EAAW,CACbkC,EAAiBlC,EAAW,EAAGyC,EACrC,GAEErG,EAAQwC,iBAAiB,WAAY8D,EAAoB,CAAEC,KAAM,MAAO;;;GC9C1E,IAAIC,EAAiB,EACrB,MAAMC,EAAqB,gCACpB,MAAMC,EAAqB,CAAC3G,EAAaC,EAAS4D,EAAW+C,EAAU9C,EAAgB+C,EAAqBC,EAAgBC,EAAqB,SAUtJ,MAAMC,EAAmBH,IAAwBC,IAAmBG,WAAaH,EAAeI,OAASC,EAAeC,MAMxH,MAAMC,EAAUC,UAOd,GAAIrH,EAAQsH,aAAab,GAAqB,CAC5CzG,EAAQuH,gBAAgBd,GACxB,MACN,CACIe,EAAWzH,EAAaC,EAAS4D,EAAW+C,EAAU9C,EAAgBkD,EAAkBD,EAAmB,EAE7G/G,EAAYyC,iBAAiB,UAAW4E,EAAS,MACjD,MAAO,KACLrH,EAAY0C,oBAAoB,UAAW2E,EAAS,KAAK,CAC1D,EAMH,MAAMK,EAAkBC,IAMtB,GAAI5E,SAASpC,gBAAkBgH,EAAI,CACjC,MACJ,CACEA,EAAGC,aAAalB,EAAoB,QACpCiB,EAAGE,OAAO,EAEZ,MAAMJ,EAAaH,MAAOtH,EAAaC,EAAS4D,EAAW+C,EAAU9C,EAAgB+C,EAAqBE,EAAqB,SAC7H,IAAKlD,IAAc+C,EAAU,CAC3B,MACJ,CACE,MAAMkB,EAAalE,EAAc5D,EAAc6D,GAAa+C,EAAW9C,GACvE,GAAID,GAAaiB,KAAKU,IAAIsC,EAAWxC,cAAgB,EAAG,CAGtDoC,EAAezH,GAUf,GAAI4G,GAAuBhD,IAAc,KAAM,CAC7CkC,EAAiBlC,EAAW4C,GAC5BJ,EAA8BpG,EAAS4D,GAAW,IAAO4C,EAAiB,GAChF,CACI,MACJ,CAIE1G,EAAcC,EAAaC,EAAS,KAAM6H,EAAWjC,WAAYkB,GACjEW,EAAezH,GAMf8H,GAAI,IAAM/H,EAAYgI,UAOtB,GAAInB,GAAuBhD,EAAW,CACpC4C,EAAiBqB,EAAWlC,cAC5BG,EAAiBlC,EAAW4C,EAChC,CACE,UAAWwB,SAAW,YAAa,CACjC,IAAIC,EACJ,MAAMC,EAAgBb,UAEpB,GAAIY,IAAyBjB,UAAW,CACtCd,aAAa+B,EACrB,CACMD,OAAOvF,oBAAoB,qBAAsB0F,GACjDH,OAAOvF,oBAAoB,qBAAsByF,GAEjD,GAAItE,EAAW,OACPwE,EAAcxE,EAAW,EAAGiE,EAAWxC,aAAcwC,EAAWpC,eAC9E,CAGM3F,EAAcC,EAAaC,EAAS,MAAO6H,EAAWjC,YAEtD6B,EAAezH,GAMf,GAAI4G,EAAqB,CACvBR,EAA8BpG,EAAS4D,GAAW,IAAO4C,EAAiB,GAClF,GAEI,MAAM2B,EAA8B,KAClCH,OAAOvF,oBAAoB,qBAAsB0F,GACjDH,OAAOxF,iBAAiB,qBAAsB0F,EAAc,EAE9D,GAAItE,EAAW,CACb,MAAM1B,QAAiBmG,EAAiBzE,GAaxC,MAAM0E,EAAoBpG,EAASqG,aAAerG,EAASsG,aAC3D,GAAIX,EAAWxC,aAAeiD,EAAoBpG,EAASuG,UAAW,CAMpE,GAAIzI,EAAQ0I,OAAS,WAAY,CAE/Bb,EAAWxC,cAAgBrD,EAC3BgG,OAAOxF,iBAAiB,qBAAsB2F,EACxD,KACa,CACHH,OAAOxF,iBAAiB,qBAAsB0F,EACxD,CAOQD,EAAuBzE,WAAW0E,EAAe,KACjD,MACR,CACA,CACIA,GACJ;;;GCxKA,MAAMS,EAAiB,KAGX,MAACC,EAAkBvB,MAAOwB,EAAQC,KAC5C,MAAMzH,EAAMyB,SACZ,MAAMiG,EAAQD,IAAa,MAC3B,MAAME,EAAYF,IAAa,UAM/B,MAAMjF,EAAiBgF,EAAOI,UAAU,iBAAkB,KAC1D,MAAMC,EAAeL,EAAOM,WAAW,eAAgB,MACvD,MAAM7G,EAAYuG,EAAOM,WAAW,oBAAqBJ,GACzD,MAAMK,EAAgBP,EAAOM,WAAW,gBAAiBJ,GACzD,MAAMpD,EAAgBkD,EAAOM,WAAW,gBAAiB,MACzD,MAAME,EAASC,MAAMC,KAAKlI,EAAImI,iBAAiB,4BAC/C,MAAMC,EAAe,IAAI5J,QACzB,MAAM6J,EAAkB,IAAI7J,QAS5B,MAAM8J,QAA2BC,EAASC,gBAC1C,MAAMC,EAAgBzC,MAAOtH,UACrB,IAAIgK,SAASC,GAAYC,EAAiBlK,EAAaiK,KAC7D,MAAME,EAAYnK,EAAYoK,YAAcpK,EAC5C,MAAMC,EAAUkK,EAAUE,cAAc,UAAYF,EAAUE,cAAc,YAC5E,MAAMlI,EAAWmI,EAAsBtK,GACvC,MAAM4G,GAAYzE,EAAWnC,EAAYwD,QAAQ,cAAgB,KACjE,IAAKvD,EAAS,CACZ,MACN,CACI,KAAoBkC,GAAYI,IAAcmH,EAAarJ,IAAIL,GAAc,CAC3E,MAAMuK,EAAOrI,EAAwBlC,EAAaC,EAASkC,GAC3DuH,EAAarI,IAAIrB,EAAauK,EACpC,CAOI,MAAMC,EAAcvK,EAAQ0I,OAAS,QAAU1I,EAAQ0I,OAAS,iBAChE,IACG6B,MACErI,KAAcyE,IACjBuC,IACCQ,EAAgBtJ,IAAIL,GAAc,CACnC,MAAMuK,EAAO5D,EAAmB3G,EAAaC,EAASkC,EAAUyE,EAAU9C,EAAgB8B,EAAegE,EAAoBX,GAC7HU,EAAgBtI,IAAIrB,EAAauK,EACvC,GAEE,MAAME,EAAmBzK,IACvB,GAAkBuC,EAAW,CAC3B,MAAMmI,EAAKhB,EAAa5H,IAAI9B,GAC5B,GAAI0K,EAAI,CACNA,GACR,CACMhB,EAAa3H,OAAO/B,EAC1B,CACI,GAAqBmJ,EAAc,CACjC,MAAMuB,EAAKf,EAAgB7H,IAAI9B,GAC/B,GAAI0K,EAAI,CACNA,GACR,CACMf,EAAgB5H,OAAO/B,EAC7B,GAEE,GAAIqJ,GAAiBT,EAAgB,CACnChG,GACJ,CAIE,IAAK,MAAMnC,KAAS6I,EAAQ,CAC1BS,EAActJ,EAClB,CAEEa,EAAImB,iBAAiB,mBAAqBU,IACxC4G,EAAc5G,EAAGwH,OAClB,IACDrJ,EAAImB,iBAAiB,qBAAuBU,IAC1CsH,EAAgBtH,EAAGwH,OACpB,GAAE,S"}