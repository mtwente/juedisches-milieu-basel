import{r as n,h as t,H as i}from"./p-1bafedb0.js";import{i as e}from"./p-27a92608.js";const o=async()=>new Promise(((n,t)=>{if(e())return n(null);if("mermaid"in window){return n(window["mermaid"])}const i=document.createElement(`script`);i.type="module";const o="mermaid-loaded";const r="mermaid-loading-error";i.innerHTML=`\n      try {\n        // load mermaid\n        var mermaid = await import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs');\n\n        // add to window\n        window.mermaid = mermaid.default;\n\n        // dispatch loaded event\n        window.dispatchEvent(new Event("${o}"));\n\n      } catch (error) {\n        // dispatch error event\n        window.dispatchEvent(new CustomEvent("${r}", {detail: error}));\n      }\n    `;const s=()=>{window.removeEventListener(o,s);n(window["mermaid"])};window.addEventListener(o,s);const d=n=>{window.removeEventListener(r,d);t(n.detail)};window.addEventListener(r,d);document.body.appendChild(i)}));const r=":host{display:block}";const s=class{constructor(t){n(this,t);this.value="";this.svg=undefined;this.error=undefined}async componentWillLoad(){this.mermaid=await o()}async componentDidLoad(){}extractChartString(){var n,t;const i=(t=(n=this.slotElement)===null||n===void 0?void 0:n.assignedNodes())===null||t===void 0?void 0:t[0];if((i===null||i===void 0?void 0:i.nodeType)!==3){return this.error="Please place (only) the mermaid chart string in the geov-mermaid element"}return i.data}async createSVG(){if(!this.mermaid)return;const n=this.extractChartString();try{const{svg:t}=await this.mermaid.render("graphDiv",n);this.svg=t}catch(n){this.error=n.toString()}}render(){return t(i,null,t("span",{style:{display:"none"}},t("slot",{onSlotchange:()=>this.createSVG(),ref:n=>this.slotElement=n})),t("div",{innerHTML:this.svg}),this.error&&t("pre",{style:{color:"red"}},this.error))}};s.style=r;export{s as geov_mermaid};
//# sourceMappingURL=p-988d8a67.entry.js.map