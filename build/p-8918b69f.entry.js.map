{"version":3,"names":["geovYasguiDataValidationCss","GeovYasguiDataValidation","constructor","hostRef","this","requiredMismatch","Set","datatypeMismatch","dataIsNotValid","data","undefined","expectedKeys","componentWillLoad","validateData","clear","forEach","expectedKey","row","_a","required","name","add","bindingKey","Object","prototype","hasOwnProperty","call","cell","datatype","customValidator","customValidationError","isValid","size","keys","length","validationCompleted","emit","render","h","Host","Array","from","map","key","find","e","message"],"sources":["node_modules/@geovistory/design-system-web/dist/collection/components/geov-yasgui-data-validation/geov-yasgui-data-validation.css?tag=geov-yasgui-data-validation&encapsulation=shadow","node_modules/@geovistory/design-system-web/dist/collection/components/geov-yasgui-data-validation/geov-yasgui-data-validation.js"],"sourcesContent":["div,\np {\n  color: var(--ion-color-danger);\n}\n","import { Host, h } from \"@stencil/core\";\n/**\n * The component validates data and emits the validation result (valid/invalid).\n *\n * It has two required inputs: `data` (the input data to be validated) and 'expectedKeys' (an array of expected keys containing the validation rules).\n *\n * The component emits a custom event named \"validationCompleted\" with a boolean value:\n *   - true if the validation passes,\n *   - false if there are validation errors.\n *\n * In case of invalid data, it displays understandable warnings/error messages.\n */\nexport class GeovYasguiDataValidation {\n  constructor() {\n    this.requiredMismatch = new Set();\n    this.datatypeMismatch = new Set();\n    this.dataIsNotValid = {};\n    this.data = undefined;\n    this.expectedKeys = undefined;\n  }\n  componentWillLoad() {\n    this.validateData();\n  }\n  validateData() {\n    this.requiredMismatch.clear();\n    this.datatypeMismatch.clear();\n    this.dataIsNotValid = {};\n    this.expectedKeys.forEach(expectedKey => {\n      // we iterate over rows\n      this.data.forEach(row => {\n        var _a;\n        // check if required key is available in this row\n        if (expectedKey.required && row[expectedKey.name] === undefined) {\n          this.requiredMismatch.add(expectedKey.name);\n        }\n        // iterate over cells in row\n        for (const bindingKey in row) {\n          if (Object.prototype.hasOwnProperty.call(row, bindingKey)) {\n            // get the cell\n            const cell = row[bindingKey];\n            // if there is a validation defined for this binding key...\n            if (expectedKey.name === bindingKey) {\n              // ...check datatype\n              if (expectedKey.datatype && ((_a = cell === null || cell === void 0 ? void 0 : cell.datatype) !== null && _a !== void 0 ? _a : 'string') !== expectedKey.datatype) {\n                this.datatypeMismatch.add(expectedKey.name);\n              }\n              // ...check custom validator\n              if ((expectedKey === null || expectedKey === void 0 ? void 0 : expectedKey.customValidator) && typeof expectedKey.customValidator === 'function') {\n                const customValidationError = expectedKey.customValidator(cell);\n                if (customValidationError)\n                  this.dataIsNotValid[expectedKey.name] = customValidationError;\n              }\n            }\n          }\n        }\n      });\n    });\n    // Emit the validationCompleted event with the validation results\n    const isValid = this.requiredMismatch.size === 0 && this.datatypeMismatch.size === 0 && Object.keys(this.dataIsNotValid).length === 0;\n    this.validationCompleted.emit(isValid);\n  }\n  render() {\n    return (h(Host, null, Array.from(this.requiredMismatch).map(key => (h(\"p\", null, \"The variable ?\", key, \" must not return empty values. Currently it is either not bound or it returns empty records.\"))), Array.from(this.datatypeMismatch).map(key => {\n      var _a;\n      return (h(\"p\", null, \"The variable ?\", key, \" must be of datatype \", (_a = this.expectedKeys.find(e => e.name === key)) === null || _a === void 0 ? void 0 :\n        _a.datatype, \". Some or all records do not match that data type.\"));\n    }), Object.keys(this.dataIsNotValid).map(key => (h(\"div\", null, \"Validation errors for variable ?\", key, \":\", h(\"ul\", null, Array.from(this.dataIsNotValid[key]).map(message => (h(\"li\", null, message)))))))));\n  }\n  static get is() { return \"geov-yasgui-data-validation\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"$\": [\"geov-yasgui-data-validation.css\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"$\": [\"geov-yasgui-data-validation.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"data\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Parser.Binding[]\",\n          \"resolved\": \"Binding[]\",\n          \"references\": {\n            \"Parser\": {\n              \"location\": \"import\",\n              \"path\": \"@triply/yasr\",\n              \"id\": \"\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"\"\n        }\n      },\n      \"expectedKeys\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"ExpectedKey[]\",\n          \"resolved\": \"ExpectedKey[]\",\n          \"references\": {\n            \"ExpectedKey\": {\n              \"location\": \"local\",\n              \"path\": \"/Users/admin/Gorg/design-system/packages/design-system-web/src/components/geov-yasgui-data-validation/geov-yasgui-data-validation.tsx\",\n              \"id\": \"src/components/geov-yasgui-data-validation/geov-yasgui-data-validation.tsx::ExpectedKey\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"\"\n        }\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"validationCompleted\",\n        \"name\": \"validationCompleted\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"\"\n        },\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        }\n      }];\n  }\n}\n//# sourceMappingURL=geov-yasgui-data-validation.js.map\n"],"mappings":"yDAAA,MAAMA,EAA8B,uC,MCYvBC,EAAwB,MACnC,WAAAC,CAAAC,G,mEACEC,KAAKC,iBAAmB,IAAIC,IAC5BF,KAAKG,iBAAmB,IAAID,IAC5BF,KAAKI,eAAiB,GACtBJ,KAAKK,KAAOC,UACZN,KAAKO,aAAeD,S,CAEtB,iBAAAE,GACER,KAAKS,c,CAEP,YAAAA,GACET,KAAKC,iBAAiBS,QACtBV,KAAKG,iBAAiBO,QACtBV,KAAKI,eAAiB,GACtBJ,KAAKO,aAAaI,SAAQC,IAExBZ,KAAKK,KAAKM,SAAQE,IAChB,IAAIC,EAEJ,GAAIF,EAAYG,UAAYF,EAAID,EAAYI,QAAUV,UAAW,CAC/DN,KAAKC,iBAAiBgB,IAAIL,EAAYI,K,CAGxC,IAAK,MAAME,KAAcL,EAAK,CAC5B,GAAIM,OAAOC,UAAUC,eAAeC,KAAKT,EAAKK,GAAa,CAEzD,MAAMK,EAAOV,EAAIK,GAEjB,GAAIN,EAAYI,OAASE,EAAY,CAEnC,GAAIN,EAAYY,YAAcV,EAAKS,IAAS,MAAQA,SAAc,OAAS,EAAIA,EAAKC,YAAc,MAAQV,SAAY,EAAIA,EAAK,YAAcF,EAAYY,SAAU,CACjKxB,KAAKG,iBAAiBc,IAAIL,EAAYI,K,CAGxC,IAAKJ,IAAgB,MAAQA,SAAqB,OAAS,EAAIA,EAAYa,yBAA2Bb,EAAYa,kBAAoB,WAAY,CAChJ,MAAMC,EAAwBd,EAAYa,gBAAgBF,GAC1D,GAAIG,EACF1B,KAAKI,eAAeQ,EAAYI,MAAQU,C,OAKlD,IAGJ,MAAMC,EAAU3B,KAAKC,iBAAiB2B,OAAS,GAAK5B,KAAKG,iBAAiByB,OAAS,GAAKT,OAAOU,KAAK7B,KAAKI,gBAAgB0B,SAAW,EACpI9B,KAAK+B,oBAAoBC,KAAKL,E,CAEhC,MAAAM,GACE,OAAQC,EAAEC,EAAM,KAAMC,MAAMC,KAAKrC,KAAKC,kBAAkBqC,KAAIC,GAAQL,EAAE,IAAK,KAAM,iBAAkBK,EAAK,kGAAmGH,MAAMC,KAAKrC,KAAKG,kBAAkBmC,KAAIC,IAC/O,IAAIzB,EACJ,OAAQoB,EAAE,IAAK,KAAM,iBAAkBK,EAAK,yBAA0BzB,EAAKd,KAAKO,aAAaiC,MAAKC,GAAKA,EAAEzB,OAASuB,OAAU,MAAQzB,SAAY,OAAS,EACvJA,EAAGU,SAAU,qDAAqD,IAClEL,OAAOU,KAAK7B,KAAKI,gBAAgBkC,KAAIC,GAAQL,EAAE,MAAO,KAAM,mCAAoCK,EAAK,IAAKL,EAAE,KAAM,KAAME,MAAMC,KAAKrC,KAAKI,eAAemC,IAAMD,KAAII,GAAYR,EAAE,KAAM,KAAMQ,S"}